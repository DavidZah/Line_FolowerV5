
line_V6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800200  00800200  000008f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000968  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b87  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f6  00000000  00000000  000036ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ecd  00000000  00000000  000048f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  000057c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e4a  00000000  00000000  00005c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbb  00000000  00000000  00006a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	84 c0       	rjmp	.+264    	; 0x10e <__vector_1>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	92 c2       	rjmp	.+1316   	; 0x56a <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c2       	rjmp	.+1120   	; 0x4b6 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	e8 c2       	rjmp	.+1488   	; 0x646 <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 35       	cpi	r26, 0x50	; 80
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	5d d2       	rcall	.+1210   	; 0x5c0 <main>
 106:	b9 c3       	rjmp	.+1906   	; 0x87a <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 10a:	f0 c2       	rjmp	.+1504   	; 0x6ec <system_init>
 10c:	08 95       	ret

0000010e <__vector_1>:

#include <driver_init.h>
#include <compiler.h>

ISR(INT0_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1

	/* Insert your EXINT/INT/0 interrupt handling code here */
}
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <adc_sync_read_sensor>:
int16_t pwm_2 = 0; 

bool sense_line[8]; 


void adc_sync_read_sensor(){
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	adc_buffer [7] = ADC_0_get_conversion(0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	83 d2       	rcall	.+1286   	; 0x630 <ADC_0_get_conversion>
 12a:	c4 e3       	ldi	r28, 0x34	; 52
 12c:	d2 e0       	ldi	r29, 0x02	; 2
 12e:	9f 87       	std	Y+15, r25	; 0x0f
 130:	8e 87       	std	Y+14, r24	; 0x0e
	adc_buffer [0] = ADC_0_get_conversion(1);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	7d d2       	rcall	.+1274   	; 0x630 <ADC_0_get_conversion>
 136:	99 83       	std	Y+1, r25	; 0x01
 138:	88 83       	st	Y, r24
	adc_buffer [1] = ADC_0_get_conversion(2);
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	79 d2       	rcall	.+1266   	; 0x630 <ADC_0_get_conversion>
 13e:	9b 83       	std	Y+3, r25	; 0x03
 140:	8a 83       	std	Y+2, r24	; 0x02
	adc_buffer [2] = ADC_0_get_conversion(3);
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	75 d2       	rcall	.+1258   	; 0x630 <ADC_0_get_conversion>
 146:	9d 83       	std	Y+5, r25	; 0x05
 148:	8c 83       	std	Y+4, r24	; 0x04
	adc_buffer [3] = ADC_0_get_conversion(4);
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	71 d2       	rcall	.+1250   	; 0x630 <ADC_0_get_conversion>
 14e:	9f 83       	std	Y+7, r25	; 0x07
 150:	8e 83       	std	Y+6, r24	; 0x06
	adc_buffer [4] = ADC_0_get_conversion(5);
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	6d d2       	rcall	.+1242   	; 0x630 <ADC_0_get_conversion>
 156:	99 87       	std	Y+9, r25	; 0x09
 158:	88 87       	std	Y+8, r24	; 0x08
	adc_buffer [5] = ADC_0_get_conversion(6);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	69 d2       	rcall	.+1234   	; 0x630 <ADC_0_get_conversion>
 15e:	9b 87       	std	Y+11, r25	; 0x0b
 160:	8a 87       	std	Y+10, r24	; 0x0a
 162:	87 e0       	ldi	r24, 0x07	; 7
	adc_buffer [6] = ADC_0_get_conversion(7);
 164:	65 d2       	rcall	.+1226   	; 0x630 <ADC_0_get_conversion>
 166:	9d 87       	std	Y+13, r25	; 0x0d
 168:	8c 87       	std	Y+12, r24	; 0x0c
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
}
 16e:	08 95       	ret

00000170 <sense_calibration>:
 170:	8f 92       	push	r8
 172:	9f 92       	push	r9

void sense_calibration(){
 174:	af 92       	push	r10
 176:	bf 92       	push	r11
 178:	cf 92       	push	r12
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	a0 97       	sbiw	r28, 0x20	; 32
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	6c 01       	movw	r12, r24
 19e:	8e 01       	movw	r16, r28
 1a0:	0f 5d       	subi	r16, 0xDF	; 223
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
 1a4:	fc 01       	movw	r30, r24
	
	uint32_t offset[8];	
	
	for (int y = 0; y < 8; y++){
		offset[y] = 0;
 1a6:	11 92       	st	Z+, r1
 1a8:	11 92       	st	Z+, r1
 1aa:	11 92       	st	Z+, r1
 1ac:	11 92       	st	Z+, r1

void sense_calibration(){
	
	uint32_t offset[8];	
	
	for (int y = 0; y < 8; y++){
 1ae:	0e 17       	cp	r16, r30
 1b0:	1f 07       	cpc	r17, r31
 1b2:	c9 f7       	brne	.-14     	; 0x1a6 <sense_calibration+0x36>
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f4 e6       	ldi	r31, 0x64	; 100
 1b8:	ef 2e       	mov	r14, r31
 1ba:	f1 2c       	mov	r15, r1
 1bc:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	af e4       	ldi	r26, 0x4F	; 79
 1c0:	b3 ec       	ldi	r27, 0xC3	; 195
 1c2:	11 97       	sbiw	r26, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <sense_calibration+0x52>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <sense_calibration+0x58>
 1c8:	00 00       	nop
		offset[y] = 0;
	}
	
	for (int x = 0; x < 100; x++){
		_delay_ms(25);
		adc_sync_read_sensor(); 
 1ca:	ab df       	rcall	.-170    	; 0x122 <adc_sync_read_sensor>
 1cc:	24 e3       	ldi	r18, 0x34	; 52
 1ce:	32 e0       	ldi	r19, 0x02	; 2
 1d0:	f6 01       	movw	r30, r12
		for (int y = 0; y < 8; y++){
			offset[y] = offset[y] + adc_buffer[y]; 
 1d2:	d9 01       	movw	r26, r18
 1d4:	4d 91       	ld	r20, X+
 1d6:	5d 91       	ld	r21, X+
 1d8:	9d 01       	movw	r18, r26
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	a2 81       	ldd	r26, Z+2	; 0x02
 1e0:	b3 81       	ldd	r27, Z+3	; 0x03
 1e2:	84 0f       	add	r24, r20
 1e4:	95 1f       	adc	r25, r21
 1e6:	a1 1d       	adc	r26, r1
 1e8:	b1 1d       	adc	r27, r1
 1ea:	81 93       	st	Z+, r24
 1ec:	91 93       	st	Z+, r25
 1ee:	a1 93       	st	Z+, r26
 1f0:	b1 93       	st	Z+, r27
	}
	
	for (int x = 0; x < 100; x++){
		_delay_ms(25);
		adc_sync_read_sensor(); 
		for (int y = 0; y < 8; y++){
 1f2:	e0 17       	cp	r30, r16
 1f4:	f1 07       	cpc	r31, r17
 1f6:	69 f7       	brne	.-38     	; 0x1d2 <sense_calibration+0x62>
 1f8:	b1 e0       	ldi	r27, 0x01	; 1
 1fa:	eb 1a       	sub	r14, r27
 1fc:	f1 08       	sbc	r15, r1
	
	for (int y = 0; y < 8; y++){
		offset[y] = 0;
	}
	
	for (int x = 0; x < 100; x++){
 1fe:	f9 f6       	brne	.-66     	; 0x1be <sense_calibration+0x4e>
 200:	0f 2e       	mov	r0, r31
 202:	f4 e1       	ldi	r31, 0x14	; 20
 204:	ef 2e       	mov	r14, r31
 206:	f2 e0       	ldi	r31, 0x02	; 2
 208:	ff 2e       	mov	r15, r31
 20a:	f0 2d       	mov	r31, r0
		for (int y = 0; y < 8; y++){
			offset[y] = offset[y] + adc_buffer[y]; 
		}	
	}
	for (int y = 0; y < 8; y++){
		sense_min_val[y] = offset[y] /100;
 20c:	0f 2e       	mov	r0, r31
 20e:	f4 e6       	ldi	r31, 0x64	; 100
 210:	8f 2e       	mov	r8, r31
 212:	91 2c       	mov	r9, r1
 214:	a1 2c       	mov	r10, r1
 216:	b1 2c       	mov	r11, r1
 218:	f0 2d       	mov	r31, r0
 21a:	f6 01       	movw	r30, r12
 21c:	61 91       	ld	r22, Z+
 21e:	71 91       	ld	r23, Z+
 220:	81 91       	ld	r24, Z+
 222:	91 91       	ld	r25, Z+
 224:	6f 01       	movw	r12, r30
 226:	a5 01       	movw	r20, r10
 228:	94 01       	movw	r18, r8
 22a:	05 d3       	rcall	.+1546   	; 0x836 <__udivmodsi4>
 22c:	d7 01       	movw	r26, r14
 22e:	2d 93       	st	X+, r18
 230:	3d 93       	st	X+, r19
 232:	7d 01       	movw	r14, r26
		adc_sync_read_sensor(); 
		for (int y = 0; y < 8; y++){
			offset[y] = offset[y] + adc_buffer[y]; 
		}	
	}
	for (int y = 0; y < 8; y++){
 234:	0c 15       	cp	r16, r12
 236:	1d 05       	cpc	r17, r13
 238:	81 f7       	brne	.-32     	; 0x21a <sense_calibration+0xaa>
	}
	for (int y = 0; y < 8; y++){
		sense_max_val[y] = offset[y] /100;
	}
	*/
}
 23a:	a0 96       	adiw	r28, 0x20	; 32
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	8f 90       	pop	r8
 25e:	08 95       	ret

00000260 <get_line_pos>:

void get_line_pos(){
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	a4 e3       	ldi	r26, 0x34	; 52
 266:	b2 e0       	ldi	r27, 0x02	; 2
 268:	c4 e1       	ldi	r28, 0x14	; 20
 26a:	d2 e0       	ldi	r29, 0x02	; 2
 26c:	e4 e4       	ldi	r30, 0x44	; 68
 26e:	f2 e0       	ldi	r31, 0x02	; 2
 270:	44 e4       	ldi	r20, 0x44	; 68
 272:	52 e0       	ldi	r21, 0x02	; 2
	
		for (int y = 0; y < 8; y++){
			if (adc_buffer[y] > sense_min_val[y]+MIN_BOOL_OFFSET){
				sense_line[y] = true; 		
 274:	61 e0       	ldi	r22, 0x01	; 1
}

void get_line_pos(){
	
		for (int y = 0; y < 8; y++){
			if (adc_buffer[y] > sense_min_val[y]+MIN_BOOL_OFFSET){
 276:	2d 91       	ld	r18, X+
 278:	3d 91       	ld	r19, X+
 27a:	89 91       	ld	r24, Y+
 27c:	99 91       	ld	r25, Y+
 27e:	8c 59       	subi	r24, 0x9C	; 156
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	82 17       	cp	r24, r18
 284:	93 07       	cpc	r25, r19
 286:	10 f4       	brcc	.+4      	; 0x28c <get_line_pos+0x2c>
				sense_line[y] = true; 		
 288:	60 83       	st	Z, r22
 28a:	01 c0       	rjmp	.+2      	; 0x28e <get_line_pos+0x2e>
			}
			else{
				sense_line[y] = false; 
 28c:	10 82       	st	Z, r1
 28e:	31 96       	adiw	r30, 0x01	; 1
	*/
}

void get_line_pos(){
	
		for (int y = 0; y < 8; y++){
 290:	a4 17       	cp	r26, r20
 292:	b5 07       	cpc	r27, r21
 294:	81 f7       	brne	.-32     	; 0x276 <get_line_pos+0x16>
			}
			else{
				sense_line[y] = false; 
			}	
		}
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <get_error>:

void get_error(){
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	a0 97       	sbiw	r28, 0x20	; 32
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	fe 01       	movw	r30, r28
 2b6:	31 96       	adiw	r30, 0x01	; 1
 2b8:	ce 01       	movw	r24, r28
 2ba:	81 96       	adiw	r24, 0x21	; 33
 2bc:	df 01       	movw	r26, r30
	int32_t sense[8];
	for (int y = 0; y < 8; y++){
			sense[y] = 0;  		
 2be:	1d 92       	st	X+, r1
 2c0:	1d 92       	st	X+, r1
 2c2:	1d 92       	st	X+, r1
 2c4:	1d 92       	st	X+, r1
		}
}

void get_error(){
	int32_t sense[8];
	for (int y = 0; y < 8; y++){
 2c6:	a8 17       	cp	r26, r24
 2c8:	b9 07       	cpc	r27, r25
 2ca:	c9 f7       	brne	.-14     	; 0x2be <get_error+0x22>
 2cc:	24 e3       	ldi	r18, 0x34	; 52
 2ce:	32 e0       	ldi	r19, 0x02	; 2
 2d0:	44 e1       	ldi	r20, 0x14	; 20
 2d2:	52 e0       	ldi	r21, 0x02	; 2
 2d4:	64 e4       	ldi	r22, 0x44	; 68
 2d6:	72 e0       	ldi	r23, 0x02	; 2
			sense[y] = 0;  		
			}
	
	for (int y = 0; y < 8; y++){
			sense[y] = adc_buffer[y];
 2d8:	d9 01       	movw	r26, r18
 2da:	8d 91       	ld	r24, X+
 2dc:	9d 91       	ld	r25, X+
 2de:	9d 01       	movw	r18, r26
			sense[y] = sense[y] - (sense_min_val[y]+MIN_ERROR_OFFSET);
 2e0:	da 01       	movw	r26, r20
 2e2:	0d 91       	ld	r16, X+
 2e4:	1d 91       	ld	r17, X+
 2e6:	ad 01       	movw	r20, r26
 2e8:	a0 e0       	ldi	r26, 0x00	; 0
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	0c 5e       	subi	r16, 0xEC	; 236
 2ee:	1f 4f       	sbci	r17, 0xFF	; 255
 2f0:	80 1b       	sub	r24, r16
 2f2:	91 0b       	sbc	r25, r17
 2f4:	a1 09       	sbc	r26, r1
 2f6:	b1 09       	sbc	r27, r1
			if (sense[y]<0){
 2f8:	2a f0       	brmi	.+10     	; 0x304 <get_error+0x68>
			sense[y] = 0;  		
			}
	
	for (int y = 0; y < 8; y++){
			sense[y] = adc_buffer[y];
			sense[y] = sense[y] - (sense_min_val[y]+MIN_ERROR_OFFSET);
 2fa:	80 83       	st	Z, r24
 2fc:	91 83       	std	Z+1, r25	; 0x01
 2fe:	a2 83       	std	Z+2, r26	; 0x02
 300:	b3 83       	std	Z+3, r27	; 0x03
 302:	04 c0       	rjmp	.+8      	; 0x30c <get_error+0x70>
			if (sense[y]<0){
				sense[y] = 0; 
 304:	10 82       	st	Z, r1
 306:	11 82       	std	Z+1, r1	; 0x01
 308:	12 82       	std	Z+2, r1	; 0x02
 30a:	13 82       	std	Z+3, r1	; 0x03
 30c:	34 96       	adiw	r30, 0x04	; 4
	int32_t sense[8];
	for (int y = 0; y < 8; y++){
			sense[y] = 0;  		
			}
	
	for (int y = 0; y < 8; y++){
 30e:	26 17       	cp	r18, r22
 310:	37 07       	cpc	r19, r23
 312:	11 f7       	brne	.-60     	; 0x2d8 <get_error+0x3c>
				sense[y] = 0; 
			}		
			}
	
	
	error = 4* sense[0]+3*sense[1]+2*sense[2]+sense[3]-sense[4]-2*sense[5]-3*sense[6]-4*sense[7];
 314:	49 81       	ldd	r20, Y+1	; 0x01
 316:	5a 81       	ldd	r21, Y+2	; 0x02
 318:	6b 81       	ldd	r22, Y+3	; 0x03
 31a:	7c 81       	ldd	r23, Y+4	; 0x04
 31c:	db 01       	movw	r26, r22
 31e:	ca 01       	movw	r24, r20
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	aa 1f       	adc	r26, r26
 326:	bb 1f       	adc	r27, r27
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	aa 1f       	adc	r26, r26
 32e:	bb 1f       	adc	r27, r27
 330:	4d 81       	ldd	r20, Y+5	; 0x05
 332:	5e 81       	ldd	r21, Y+6	; 0x06
 334:	6f 81       	ldd	r22, Y+7	; 0x07
 336:	78 85       	ldd	r23, Y+8	; 0x08
 338:	8a 01       	movw	r16, r20
 33a:	9b 01       	movw	r18, r22
 33c:	00 0f       	add	r16, r16
 33e:	11 1f       	adc	r17, r17
 340:	22 1f       	adc	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	40 0f       	add	r20, r16
 346:	51 1f       	adc	r21, r17
 348:	62 1f       	adc	r22, r18
 34a:	73 1f       	adc	r23, r19
 34c:	48 0f       	add	r20, r24
 34e:	59 1f       	adc	r21, r25
 350:	6a 1f       	adc	r22, r26
 352:	7b 1f       	adc	r23, r27
 354:	89 85       	ldd	r24, Y+9	; 0x09
 356:	9a 85       	ldd	r25, Y+10	; 0x0a
 358:	ab 85       	ldd	r26, Y+11	; 0x0b
 35a:	bc 85       	ldd	r27, Y+12	; 0x0c
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	84 0f       	add	r24, r20
 366:	95 1f       	adc	r25, r21
 368:	a6 1f       	adc	r26, r22
 36a:	b7 1f       	adc	r27, r23
 36c:	4d 85       	ldd	r20, Y+13	; 0x0d
 36e:	5e 85       	ldd	r21, Y+14	; 0x0e
 370:	6f 85       	ldd	r22, Y+15	; 0x0f
 372:	78 89       	ldd	r23, Y+16	; 0x10
 374:	84 0f       	add	r24, r20
 376:	95 1f       	adc	r25, r21
 378:	a6 1f       	adc	r26, r22
 37a:	b7 1f       	adc	r27, r23
 37c:	49 89       	ldd	r20, Y+17	; 0x11
 37e:	5a 89       	ldd	r21, Y+18	; 0x12
 380:	6b 89       	ldd	r22, Y+19	; 0x13
 382:	7c 89       	ldd	r23, Y+20	; 0x14
 384:	84 1b       	sub	r24, r20
 386:	95 0b       	sbc	r25, r21
 388:	a6 0b       	sbc	r26, r22
 38a:	b7 0b       	sbc	r27, r23
 38c:	4d 89       	ldd	r20, Y+21	; 0x15
 38e:	5e 89       	ldd	r21, Y+22	; 0x16
 390:	6f 89       	ldd	r22, Y+23	; 0x17
 392:	78 8d       	ldd	r23, Y+24	; 0x18
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	66 1f       	adc	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	84 1b       	sub	r24, r20
 39e:	95 0b       	sbc	r25, r21
 3a0:	a6 0b       	sbc	r26, r22
 3a2:	b7 0b       	sbc	r27, r23
 3a4:	49 8d       	ldd	r20, Y+25	; 0x19
 3a6:	5a 8d       	ldd	r21, Y+26	; 0x1a
 3a8:	6b 8d       	ldd	r22, Y+27	; 0x1b
 3aa:	7c 8d       	ldd	r23, Y+28	; 0x1c
 3ac:	8a 01       	movw	r16, r20
 3ae:	9b 01       	movw	r18, r22
 3b0:	00 0f       	add	r16, r16
 3b2:	11 1f       	adc	r17, r17
 3b4:	22 1f       	adc	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	40 0f       	add	r20, r16
 3ba:	51 1f       	adc	r21, r17
 3bc:	62 1f       	adc	r22, r18
 3be:	73 1f       	adc	r23, r19
 3c0:	84 1b       	sub	r24, r20
 3c2:	95 0b       	sbc	r25, r21
 3c4:	a6 0b       	sbc	r26, r22
 3c6:	b7 0b       	sbc	r27, r23
 3c8:	4d 8d       	ldd	r20, Y+29	; 0x1d
 3ca:	5e 8d       	ldd	r21, Y+30	; 0x1e
 3cc:	6f 8d       	ldd	r22, Y+31	; 0x1f
 3ce:	78 a1       	ldd	r23, Y+32	; 0x20
 3d0:	44 0f       	add	r20, r20
 3d2:	55 1f       	adc	r21, r21
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	44 0f       	add	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	66 1f       	adc	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	84 1b       	sub	r24, r20
 3e2:	95 0b       	sbc	r25, r21
 3e4:	a6 0b       	sbc	r26, r22
 3e6:	b7 0b       	sbc	r27, r23
 3e8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <error>
 3ec:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <error+0x1>
 3f0:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <error+0x2>
 3f4:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <error+0x3>
	
	
}
 3f8:	a0 96       	adiw	r28, 0x20	; 32
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <get_pid>:
	if (error>INTEGRAL_OFFSET && error<INTEGRAL_OFFSET)
	{
		integral = integral + error; 
	}
	
	derivate = error - last_error; 
 40e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <error>
 412:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <error+0x1>
 416:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <error+0x2>
 41a:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <error+0x3>
		
	last_error = error; 
 41e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <last_error.2774>
 422:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <last_error.2774+0x1>
 426:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <last_error.2774+0x2>
 42a:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <last_error.2774+0x3>
	
	oper_pwm = (KP*error)+(Ki*integral)+(KD*derivate); 
 42e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <oper_pwm>
 432:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <oper_pwm+0x1>
 436:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <oper_pwm+0x2>
 43a:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <oper_pwm+0x3>
 43e:	08 95       	ret

00000440 <set_pwm>:
}

void set_pwm(){
	int32_t oper_pwm_1 = BASE_SPEED + oper_pwm;
 440:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <oper_pwm>
 444:	50 91 0b 02 	lds	r21, 0x020B	; 0x80020b <oper_pwm+0x1>
 448:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <oper_pwm+0x2>
 44c:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <oper_pwm+0x3>
	int32_t oper_pwm_2 = BASE_SPEED - oper_pwm;
 450:	86 e9       	ldi	r24, 0x96	; 150
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	a0 e0       	ldi	r26, 0x00	; 0
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	84 1b       	sub	r24, r20
 45a:	95 0b       	sbc	r25, r21
 45c:	a6 0b       	sbc	r26, r22
 45e:	b7 0b       	sbc	r27, r23
 460:	4a 56       	subi	r20, 0x6A	; 106
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	6f 4f       	sbci	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	41 39       	cpi	r20, 0x91	; 145
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	52 07       	cpc	r21, r18
 46e:	61 05       	cpc	r22, r1
 470:	71 05       	cpc	r23, r1
 472:	24 f0       	brlt	.+8      	; 0x47c <set_pwm+0x3c>
 474:	40 e9       	ldi	r20, 0x90	; 144
 476:	51 e0       	ldi	r21, 0x01	; 1
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	81 39       	cpi	r24, 0x91	; 145
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	92 07       	cpc	r25, r18
 482:	a1 05       	cpc	r26, r1
 484:	b1 05       	cpc	r27, r1
 486:	24 f0       	brlt	.+8      	; 0x490 <set_pwm+0x50>
 488:	80 e9       	ldi	r24, 0x90	; 144
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	a0 e0       	ldi	r26, 0x00	; 0
 48e:	b0 e0       	ldi	r27, 0x00	; 0
		oper_pwm_1 = 0;
	}
	if (oper_pwm_2 < MIN_SPEED){
		oper_pwm_2 = 0;
	}
	pwm_1 = oper_pwm_1; 
 490:	77 23       	and	r23, r23
 492:	1c f4       	brge	.+6      	; 0x49a <set_pwm+0x5a>
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	ba 01       	movw	r22, r20
 49a:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <pwm_1+0x1>
 49e:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <pwm_1>
	pwm_2 = oper_pwm_2; 
 4a2:	bb 23       	and	r27, r27
 4a4:	1c f4       	brge	.+6      	; 0x4ac <set_pwm+0x6c>
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	dc 01       	movw	r26, r24
 4ac:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <pwm_2+0x1>
 4b0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <pwm_2>
 4b4:	08 95       	ret

000004b6 <__vector_21>:
}
/*PWM 1*/
ISR(TIMER0_COMPA_vect)
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	0b b6       	in	r0, 0x3b	; 59
 4c2:	0f 92       	push	r0
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	static uint_fast16_t counter;
	
	if (counter == 0) {
 4d0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 4d4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 4d8:	89 2b       	or	r24, r25
 4da:	41 f4       	brne	.+16     	; 0x4ec <__vector_21+0x36>
 *                  false = Pin level set to "low" state
 */
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
 4dc:	e2 e0       	ldi	r30, 0x02	; 2
 4de:	f1 e0       	ldi	r31, 0x01	; 1
 4e0:	80 81       	ld	r24, Z
 4e2:	80 61       	ori	r24, 0x10	; 16
 4e4:	80 83       	st	Z, r24
 4e6:	80 81       	ld	r24, Z
 4e8:	80 62       	ori	r24, 0x20	; 32
 4ea:	80 83       	st	Z, r24
		PIN_PWM_1_set_level(true);
		PIN_PWM_2_set_level(true);

	}
	if (counter == pwm_1){
 4ec:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
 4f0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
 4f4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <pwm_1>
 4f8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <pwm_1+0x1>
 4fc:	28 17       	cp	r18, r24
 4fe:	39 07       	cpc	r19, r25
 500:	29 f4       	brne	.+10     	; 0x50c <__vector_21+0x56>
	} else {
		PORTH &= ~(1 << pin);
 502:	e2 e0       	ldi	r30, 0x02	; 2
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	80 81       	ld	r24, Z
 508:	8f 7e       	andi	r24, 0xEF	; 239
 50a:	80 83       	st	Z, r24
		PIN_PWM_1_set_level(false); 
	}
	if (counter == pwm_2){
 50c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
 510:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
 514:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <pwm_2>
 518:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <pwm_2+0x1>
 51c:	28 17       	cp	r18, r24
 51e:	39 07       	cpc	r19, r25
 520:	29 f4       	brne	.+10     	; 0x52c <__vector_21+0x76>
 522:	e2 e0       	ldi	r30, 0x02	; 2
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	80 81       	ld	r24, Z
 528:	8f 7d       	andi	r24, 0xDF	; 223
 52a:	80 83       	st	Z, r24
		PIN_PWM_2_set_level(false); 
	}
	if(counter == 500){
 52c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 530:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 534:	84 3f       	cpi	r24, 0xF4	; 244
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	92 07       	cpc	r25, r18
 53a:	29 f4       	brne	.+10     	; 0x546 <__vector_21+0x90>
		counter = 0; 
 53c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 540:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 544:	05 c0       	rjmp	.+10     	; 0x550 <__vector_21+0x9a>
	}
	else{
	counter++;
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 54c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	}
}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0b be       	out	0x3b, r0	; 59
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__vector_17>:
ISR(TIMER1_COMPA_vect)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	0b b6       	in	r0, 0x3b	; 59
 576:	0f 92       	push	r0
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	4f 93       	push	r20
 57e:	5f 93       	push	r21
 580:	6f 93       	push	r22
 582:	7f 93       	push	r23
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	af 93       	push	r26
 58a:	bf 93       	push	r27
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
	adc_sync_read_sensor();
 590:	c8 dd       	rcall	.-1136   	; 0x122 <adc_sync_read_sensor>
	get_line_pos();
 592:	66 de       	rcall	.-820    	; 0x260 <get_line_pos>
	get_error();
 594:	83 de       	rcall	.-762    	; 0x29c <get_error>
	get_pid(); 
 596:	3b df       	rcall	.-394    	; 0x40e <get_pid>
 598:	53 df       	rcall	.-346    	; 0x440 <set_pwm>
	set_pwm(); 			
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
}
 59e:	bf 91       	pop	r27
 5a0:	af 91       	pop	r26
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	7f 91       	pop	r23
 5a8:	6f 91       	pop	r22
 5aa:	5f 91       	pop	r21
 5ac:	4f 91       	pop	r20
 5ae:	3f 91       	pop	r19
 5b0:	2f 91       	pop	r18
 5b2:	0f 90       	pop	r0
 5b4:	0b be       	out	0x3b, r0	; 59
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <main>:
 5c0:	a4 dd       	rcall	.-1208   	; 0x10a <atmel_start_init>
 5c2:	d6 dd       	rcall	.-1108   	; 0x170 <sense_calibration>
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
	sense_calibration();
 5c4:	78 94       	sei
	ENABLE_INTERRUPTS();
 5c6:	8a ea       	ldi	r24, 0xAA	; 170
		
	OCR0A =0xaa;
 5c8:	87 bd       	out	0x27, r24	; 39
 5ca:	88 ee       	ldi	r24, 0xE8	; 232
	
	OCR1A = 1000; // 1ms
 5cc:	93 e0       	ldi	r25, 0x03	; 3
 5ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 5d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <main+0x16>

000005d8 <ADC_0_init>:
 5d8:	e4 e6       	ldi	r30, 0x64	; 100
 *
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	8e 7f       	andi	r24, 0xFE	; 254
 5e0:	80 83       	st	Z, r24
 5e2:	80 e4       	ldi	r24, 0x40	; 64
 5e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 5e8:	8d ea       	ldi	r24, 0xAD	; 173
 5ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 5ee:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	08 95       	ret

000005fc <ADC_0_start_conversion>:
 5fc:	ec e7       	ldi	r30, 0x7C	; 124
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	90 81       	ld	r25, Z
 602:	90 7e       	andi	r25, 0xE0	; 224
 604:	90 83       	st	Z, r25
 606:	90 81       	ld	r25, Z
 608:	89 2b       	or	r24, r25
 60a:	80 83       	st	Z, r24
 60c:	ea e7       	ldi	r30, 0x7A	; 122
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	80 64       	ori	r24, 0x40	; 64
 614:	80 83       	st	Z, r24
 616:	08 95       	ret

00000618 <ADC_0_is_conversion_done>:
 618:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 61c:	82 95       	swap	r24
 61e:	81 70       	andi	r24, 0x01	; 1
 620:	08 95       	ret

00000622 <ADC_0_get_conversion_result>:
 622:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 626:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	92 2b       	or	r25, r18
 62e:	08 95       	ret

00000630 <ADC_0_get_conversion>:
 630:	e5 df       	rcall	.-54     	; 0x5fc <ADC_0_start_conversion>
 632:	f2 df       	rcall	.-28     	; 0x618 <ADC_0_is_conversion_done>
 634:	88 23       	and	r24, r24
 636:	e9 f3       	breq	.-6      	; 0x632 <ADC_0_get_conversion+0x2>
 638:	f4 df       	rcall	.-24     	; 0x622 <ADC_0_get_conversion_result>
 63a:	ea e7       	ldi	r30, 0x7A	; 122
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	20 81       	ld	r18, Z
 640:	20 61       	ori	r18, 0x10	; 16
 642:	20 83       	st	Z, r18
 644:	08 95       	ret

00000646 <__vector_29>:
}

ISR(ADC_vect)
{
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	0b b6       	in	r0, 0x3b	; 59
 652:	0f 92       	push	r0
 654:	2f 93       	push	r18
 656:	3f 93       	push	r19
 658:	4f 93       	push	r20
 65a:	5f 93       	push	r21
 65c:	6f 93       	push	r22
 65e:	7f 93       	push	r23
 660:	8f 93       	push	r24
 662:	9f 93       	push	r25
 664:	af 93       	push	r26
 666:	bf 93       	push	r27
 668:	ef 93       	push	r30
 66a:	ff 93       	push	r31

	if (ADC_0_cb != NULL) {
 66c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <ADC_0_cb>
 670:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <ADC_0_cb+0x1>
 674:	30 97       	sbiw	r30, 0x00	; 0
 676:	09 f0       	breq	.+2      	; 0x67a <__vector_29+0x34>
		ADC_0_cb();
 678:	19 95       	eicall
	}
}
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0b be       	out	0x3b, r0	; 59
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <EXTERNAL_IRQ_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 6a0:	50 98       	cbi	0x0a, 0	; 10
 6a2:	58 98       	cbi	0x0b, 0	; 11
 6a4:	92 c0       	rjmp	.+292    	; 0x7ca <EXTERNAL_IRQ_0_init>
 6a6:	08 95       	ret

000006a8 <ADC_0_initialization>:
 6a8:	e8 e0       	ldi	r30, 0x08	; 8
 6aa:	f1 e0       	ldi	r31, 0x01	; 1
 6ac:	80 81       	ld	r24, Z
 6ae:	8e 7f       	andi	r24, 0xFE	; 254
 6b0:	80 83       	st	Z, r24
 6b2:	80 81       	ld	r24, Z
 6b4:	8d 7f       	andi	r24, 0xFD	; 253
 6b6:	80 83       	st	Z, r24
 6b8:	80 81       	ld	r24, Z
 6ba:	8b 7f       	andi	r24, 0xFB	; 251
 6bc:	80 83       	st	Z, r24
 6be:	80 81       	ld	r24, Z
 6c0:	87 7f       	andi	r24, 0xF7	; 247
 6c2:	80 83       	st	Z, r24
 6c4:	80 81       	ld	r24, Z
 6c6:	8f 7e       	andi	r24, 0xEF	; 239
 6c8:	80 83       	st	Z, r24
 6ca:	80 81       	ld	r24, Z
 6cc:	8f 7d       	andi	r24, 0xDF	; 223
 6ce:	80 83       	st	Z, r24
 6d0:	80 81       	ld	r24, Z
 6d2:	8f 7b       	andi	r24, 0xBF	; 191
 6d4:	80 83       	st	Z, r24
 6d6:	80 81       	ld	r24, Z
 6d8:	8f 77       	andi	r24, 0x7F	; 127
 6da:	80 83       	st	Z, r24
 6dc:	7d cf       	rjmp	.-262    	; 0x5d8 <ADC_0_init>
 6de:	08 95       	ret

000006e0 <PWM_0_initialization>:
 6e0:	27 9a       	sbi	0x04, 7	; 4
 6e2:	2f 98       	cbi	0x05, 7	; 5
 6e4:	9d 9a       	sbi	0x13, 5	; 19
 6e6:	a5 98       	cbi	0x14, 5	; 20
 6e8:	7f c0       	rjmp	.+254    	; 0x7e8 <PWM_0_init>
 6ea:	08 95       	ret

000006ec <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM5) | (1 << PRTIM3) | (1 << PRUSART3) | (1 << PRUSART2) | (1 << PRUSART1);
 6f0:	8f e3       	ldi	r24, 0x3F	; 63
 6f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

	PRR0 = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 6f6:	8f ee       	ldi	r24, 0xEF	; 239
 6f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
 6fc:	81 b1       	in	r24, 0x01	; 1
 6fe:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
 700:	82 b1       	in	r24, 0x02	; 2
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 706:	94 b1       	in	r25, 0x04	; 4
 708:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 70a:	95 b1       	in	r25, 0x05	; 5
 70c:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 70e:	97 b1       	in	r25, 0x07	; 7
 710:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
 712:	98 b1       	in	r25, 0x08	; 8
 714:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 716:	9a b1       	in	r25, 0x0a	; 10
 718:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 71a:	9b b1       	in	r25, 0x0b	; 11
 71c:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 71e:	9d b1       	in	r25, 0x0d	; 13
 720:	1d b8       	out	0x0d, r1	; 13

		PORTE |= mask;
 722:	9e b1       	in	r25, 0x0e	; 14
 724:	8e b9       	out	0x0e, r24	; 14
		break;
	case PORT_DIR_OUT:
		DDRF |= mask;
		break;
	case PORT_DIR_OFF:
		DDRF &= ~mask;
 726:	90 b3       	in	r25, 0x10	; 16
 728:	10 ba       	out	0x10, r1	; 16

		PORTF |= mask;
 72a:	91 b3       	in	r25, 0x11	; 17
 72c:	81 bb       	out	0x11, r24	; 17
		break;
	case PORT_DIR_OUT:
		DDRG |= mask;
		break;
	case PORT_DIR_OFF:
		DDRG &= ~mask;
 72e:	93 b3       	in	r25, 0x13	; 19
 730:	90 7c       	andi	r25, 0xC0	; 192
 732:	93 bb       	out	0x13, r25	; 19

		PORTG |= mask;
 734:	94 b3       	in	r25, 0x14	; 20
 736:	9f 63       	ori	r25, 0x3F	; 63
 738:	94 bb       	out	0x14, r25	; 20
		break;
	case PORT_DIR_OUT:
		DDRH |= mask;
		break;
	case PORT_DIR_OFF:
		DDRH &= ~mask;
 73a:	a1 e0       	ldi	r26, 0x01	; 1
 73c:	b1 e0       	ldi	r27, 0x01	; 1
 73e:	9c 91       	ld	r25, X
 740:	1c 92       	st	X, r1

		PORTH |= mask;
 742:	e2 e0       	ldi	r30, 0x02	; 2
 744:	f1 e0       	ldi	r31, 0x01	; 1
 746:	90 81       	ld	r25, Z
 748:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		DDRJ |= mask;
		break;
	case PORT_DIR_OFF:
		DDRJ &= ~mask;
 74a:	c4 e0       	ldi	r28, 0x04	; 4
 74c:	d1 e0       	ldi	r29, 0x01	; 1
 74e:	98 81       	ld	r25, Y
 750:	18 82       	st	Y, r1

		PORTJ |= mask;
 752:	c5 e0       	ldi	r28, 0x05	; 5
 754:	d1 e0       	ldi	r29, 0x01	; 1
 756:	98 81       	ld	r25, Y
 758:	88 83       	st	Y, r24
		break;
	case PORT_DIR_OUT:
		DDRK |= mask;
		break;
	case PORT_DIR_OFF:
		DDRK &= ~mask;
 75a:	c7 e0       	ldi	r28, 0x07	; 7
 75c:	d1 e0       	ldi	r29, 0x01	; 1
 75e:	98 81       	ld	r25, Y
 760:	18 82       	st	Y, r1

		PORTK |= mask;
 762:	c8 e0       	ldi	r28, 0x08	; 8
 764:	d1 e0       	ldi	r29, 0x01	; 1
 766:	98 81       	ld	r25, Y
 768:	88 83       	st	Y, r24
		break;
	case PORT_DIR_OUT:
		DDRL |= mask;
		break;
	case PORT_DIR_OFF:
		DDRL &= ~mask;
 76a:	ca e0       	ldi	r28, 0x0A	; 10
 76c:	d1 e0       	ldi	r29, 0x01	; 1
 76e:	98 81       	ld	r25, Y
 770:	18 82       	st	Y, r1

		PORTL |= mask;
 772:	cb e0       	ldi	r28, 0x0B	; 11
 774:	d1 e0       	ldi	r29, 0x01	; 1
 776:	98 81       	ld	r25, Y
 778:	88 83       	st	Y, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRA |= 1 << pin;
 77a:	08 9a       	sbi	0x01, 0	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTA |= 1 << pin;
 77c:	10 9a       	sbi	0x02, 0	; 2
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRA |= 1 << pin;
 77e:	09 9a       	sbi	0x01, 1	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTA |= 1 << pin;
 780:	11 9a       	sbi	0x02, 1	; 2
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRA |= 1 << pin;
 782:	0a 9a       	sbi	0x01, 2	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTA |= 1 << pin;
 784:	12 9a       	sbi	0x02, 2	; 2
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 786:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 788:	2d 98       	cbi	0x05, 5	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 78a:	26 9a       	sbi	0x04, 6	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 78c:	2e 98       	cbi	0x05, 6	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
 78e:	6b 9a       	sbi	0x0d, 3	; 13
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTE |= 1 << pin;
	} else {
		PORTE &= ~(1 << pin);
 790:	73 98       	cbi	0x0e, 3	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
 792:	6c 9a       	sbi	0x0d, 4	; 13
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTE |= 1 << pin;
	} else {
		PORTE &= ~(1 << pin);
 794:	74 98       	cbi	0x0e, 4	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
 796:	8c 91       	ld	r24, X
 798:	80 61       	ori	r24, 0x10	; 16
 79a:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
 79c:	80 81       	ld	r24, Z
 79e:	8f 7e       	andi	r24, 0xEF	; 239
 7a0:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
 7a2:	8c 91       	ld	r24, X
 7a4:	80 62       	ori	r24, 0x20	; 32
 7a6:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
 7a8:	80 81       	ld	r24, Z
 7aa:	8f 7d       	andi	r24, 0xDF	; 223
 7ac:	80 83       	st	Z, r24
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	60 e8       	ldi	r22, 0x80	; 128
 7b2:	81 e6       	ldi	r24, 0x61	; 97
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	10 d0       	rcall	.+32     	; 0x7d8 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 7b8:	13 be       	out	0x33, r1	; 51
	    // <true"> High
	    false);

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
 7ba:	15 be       	out	0x35, r1	; 53

	ADC_0_initialization();
 7bc:	71 df       	rcall	.-286    	; 0x6a0 <EXTERNAL_IRQ_0_initialization>

	PWM_0_initialization();
 7be:	74 df       	rcall	.-280    	; 0x6a8 <ADC_0_initialization>
 7c0:	8f df       	rcall	.-226    	; 0x6e0 <PWM_0_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 7c2:	20 d0       	rcall	.+64     	; 0x804 <TIMER_0_init>
 7c4:	df 91       	pop	r29
	ADC_0_initialization();

	PWM_0_initialization();

	TIMER_0_initialization();
}
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	EICRA = (1 << ISC01) | (0 << ISC00); // The falling edge of ISC0 generates an interrupt request
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>

	EIMSK = (1 << INT0); // Enable external interrupt request 0
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	8d bb       	out	0x1d, r24	; 29

	return 0;
}
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	08 95       	ret

000007d8 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 7d8:	2f b7       	in	r18, 0x3f	; 63
	cli
 7da:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
 7dc:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
 7de:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 7e0:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 7e2:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 7e4:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 7e6:	08 95       	ret

000007e8 <PWM_0_init>:
 */
int8_t PWM_0_init()
{

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
 7e8:	e4 e6       	ldi	r30, 0x64	; 100
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	8f 7d       	andi	r24, 0xDF	; 223
 7f0:	80 83       	st	Z, r24

	TCCR0A = (1 << COM0A1) | (0 << COM0A0)   /* Clear OCA on up-counting, set OCA on down-counting */
 7f2:	81 ea       	ldi	r24, 0xA1	; 161
 7f4:	84 bd       	out	0x24, r24	; 36
	         | (1 << COM0B1) | (0 << COM0B0) /* Clear OCB on up-counting, set OCB on down-counting */
	         | (0 << WGM01) | (1 << WGM00);  /* TC8 Mode 1 Phase Correct */

	TCCR0B = 0                                          /* TC8 Mode 1 Phase Correct */
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	85 bd       	out	0x25, r24	; 37

	// TIMSK0 = 0 << OCIE0B /* Output Compare B Match Interrupt Enable: disabled */
	//		 | 0 << OCIE0A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << TOIE0; /* Overflow Interrupt Enable: disabled */

	OCR0A = 0xaa; /* Output compare A: 0xaa */
 7fa:	8a ea       	ldi	r24, 0xAA	; 170
 7fc:	87 bd       	out	0x27, r24	; 39

	OCR0B = 0xaa; /* Output compare B: 0xaa */
 7fe:	88 bd       	out	0x28, r24	; 40

	return 0;
}
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret

00000804 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
 804:	e4 e6       	ldi	r30, 0x64	; 100
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	87 7f       	andi	r24, 0xF7	; 247
 80c:	80 83       	st	Z, r24

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 12 CTC */

	TCCR1B = (1 << WGM13) | (1 << WGM12)                /* TC16 Mode 12 CTC */
 80e:	8a e1       	ldi	r24, 0x1A	; 26
 810:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	         | 0 << ICNC1                               /* Input Capture Noise Canceler: disabled */
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (0 << CS12) | (1 << CS11) | (0 << CS10); /* IO clock divided by 8 */

	ICR1 = 0xab; /* Top counter value: 0xab */
 814:	8b ea       	ldi	r24, 0xAB	; 171
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 81c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>

	OCR1A = 0xaa; /* Output compare A: 0xaa */
 820:	8a ea       	ldi	r24, 0xAA	; 170
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 828:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	TIMSK1 = 0 << OCIE1B   /* Output Compare B Match Interrupt Enable: disabled */
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	         | 1 << OCIE1A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE1  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	08 95       	ret

00000836 <__udivmodsi4>:
 836:	a1 e2       	ldi	r26, 0x21	; 33
 838:	1a 2e       	mov	r1, r26
 83a:	aa 1b       	sub	r26, r26
 83c:	bb 1b       	sub	r27, r27
 83e:	fd 01       	movw	r30, r26
 840:	0d c0       	rjmp	.+26     	; 0x85c <__udivmodsi4_ep>

00000842 <__udivmodsi4_loop>:
 842:	aa 1f       	adc	r26, r26
 844:	bb 1f       	adc	r27, r27
 846:	ee 1f       	adc	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	a2 17       	cp	r26, r18
 84c:	b3 07       	cpc	r27, r19
 84e:	e4 07       	cpc	r30, r20
 850:	f5 07       	cpc	r31, r21
 852:	20 f0       	brcs	.+8      	; 0x85c <__udivmodsi4_ep>
 854:	a2 1b       	sub	r26, r18
 856:	b3 0b       	sbc	r27, r19
 858:	e4 0b       	sbc	r30, r20
 85a:	f5 0b       	sbc	r31, r21

0000085c <__udivmodsi4_ep>:
 85c:	66 1f       	adc	r22, r22
 85e:	77 1f       	adc	r23, r23
 860:	88 1f       	adc	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	1a 94       	dec	r1
 866:	69 f7       	brne	.-38     	; 0x842 <__udivmodsi4_loop>
 868:	60 95       	com	r22
 86a:	70 95       	com	r23
 86c:	80 95       	com	r24
 86e:	90 95       	com	r25
 870:	9b 01       	movw	r18, r22
 872:	ac 01       	movw	r20, r24
 874:	bd 01       	movw	r22, r26
 876:	cf 01       	movw	r24, r30
 878:	08 95       	ret

0000087a <_exit>:
 87a:	f8 94       	cli

0000087c <__stop_program>:
 87c:	ff cf       	rjmp	.-2      	; 0x87c <__stop_program>
