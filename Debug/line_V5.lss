
line_V5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000209a  0000212e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000209a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800204  00800204  00002132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  000021a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e84  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d2  00000000  00000000  00004354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169d  00000000  00000000  00005426  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b08  00000000  00000000  00006ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c0b  00000000  00000000  000075cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000169b  00000000  00000000  000081d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00009872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__vector_9>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	13 c5       	rjmp	.+2598   	; 0xa5c <__vector_13>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c5       	rjmp	.+2762   	; 0xb10 <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c4       	rjmp	.+2386   	; 0x9a8 <__vector_21>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c6       	rjmp	.+3178   	; 0xce0 <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e9       	ldi	r30, 0x9A	; 154
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 30       	cpi	r26, 0x04	; 4
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a4 e0       	ldi	r26, 0x04	; 4
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 35       	cpi	r26, 0x5A	; 90
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	2d d5       	rcall	.+2650   	; 0xb7a <main>
     120:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	system_init();
     12e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <system_init>
}
     132:	00 00       	nop
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <__vector_9>:

#include <driver_init.h>
#include <compiler.h>

ISR(PCINT0_vect)
{
     13a:	1f 92       	push	r1
     13c:	0f 92       	push	r0
     13e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     142:	0f 92       	push	r0
     144:	11 24       	eor	r1, r1
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62

	/* Insert your pin change 0 interrupt handling code here */
}
     14e:	00 00       	nop
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	0f 90       	pop	r0
     156:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <PORTH_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	1f 92       	push	r1
     166:	1f 92       	push	r1
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	89 83       	std	Y+1, r24	; 0x01
     16e:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	88 23       	and	r24, r24
     174:	a9 f0       	breq	.+42     	; 0x1a0 <PORTH_set_pin_level+0x40>
		PORTH |= 1 << pin;
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	22 e0       	ldi	r18, 0x02	; 2
     17c:	31 e0       	ldi	r19, 0x01	; 1
     17e:	f9 01       	movw	r30, r18
     180:	20 81       	ld	r18, Z
     182:	62 2f       	mov	r22, r18
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	42 2f       	mov	r20, r18
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <PORTH_set_pin_level+0x34>
     190:	22 0f       	add	r18, r18
     192:	33 1f       	adc	r19, r19
     194:	4a 95       	dec	r20
     196:	e2 f7       	brpl	.-8      	; 0x190 <PORTH_set_pin_level+0x30>
     198:	26 2b       	or	r18, r22
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18
	} else {
		PORTH &= ~(1 << pin);
	}
}
     19e:	15 c0       	rjmp	.+42     	; 0x1ca <PORTH_set_pin_level+0x6a>
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	22 e0       	ldi	r18, 0x02	; 2
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	f9 01       	movw	r30, r18
     1aa:	20 81       	ld	r18, Z
     1ac:	62 2f       	mov	r22, r18
     1ae:	29 81       	ldd	r18, Y+1	; 0x01
     1b0:	42 2f       	mov	r20, r18
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <PORTH_set_pin_level+0x5e>
     1ba:	22 0f       	add	r18, r18
     1bc:	33 1f       	adc	r19, r19
     1be:	4a 95       	dec	r20
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <PORTH_set_pin_level+0x5a>
     1c2:	20 95       	com	r18
     1c4:	26 23       	and	r18, r22
     1c6:	fc 01       	movw	r30, r24
     1c8:	20 83       	st	Z, r18
	}
}
     1ca:	00 00       	nop
     1cc:	0f 90       	pop	r0
     1ce:	0f 90       	pop	r0
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	08 95       	ret

000001d6 <PIN_PWM_1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PIN_PWM_1_set_level(const bool level)
{
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	1f 92       	push	r1
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	89 83       	std	Y+1, r24	; 0x01
	PORTH_set_pin_level(4, level);
     1e2:	69 81       	ldd	r22, Y+1	; 0x01
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	bc df       	rcall	.-136    	; 0x160 <PORTH_set_pin_level>
}
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <adc_sync_read_sensor>:
int16_t pwm_2 = 1; 

bool sense_line[8]; 


void adc_sync_read_sensor(){
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
	adc_buffer [7] = ADC_0_get_conversion(0);
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	4e d5       	rcall	.+2716   	; 0xc9a <ADC_0_get_conversion>
     1fe:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <adc_buffer+0xf>
     202:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <adc_buffer+0xe>
	adc_buffer [0] = ADC_0_get_conversion(1);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	48 d5       	rcall	.+2704   	; 0xc9a <ADC_0_get_conversion>
     20a:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <adc_buffer+0x1>
     20e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <adc_buffer>
	adc_buffer [1] = ADC_0_get_conversion(2);
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	42 d5       	rcall	.+2692   	; 0xc9a <ADC_0_get_conversion>
     216:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <adc_buffer+0x3>
     21a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <adc_buffer+0x2>
	adc_buffer [2] = ADC_0_get_conversion(3);
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	3c d5       	rcall	.+2680   	; 0xc9a <ADC_0_get_conversion>
     222:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <adc_buffer+0x5>
     226:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <adc_buffer+0x4>
	adc_buffer [3] = ADC_0_get_conversion(4);
     22a:	84 e0       	ldi	r24, 0x04	; 4
     22c:	36 d5       	rcall	.+2668   	; 0xc9a <ADC_0_get_conversion>
     22e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <adc_buffer+0x7>
     232:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <adc_buffer+0x6>
	adc_buffer [4] = ADC_0_get_conversion(5);
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	30 d5       	rcall	.+2656   	; 0xc9a <ADC_0_get_conversion>
     23a:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <adc_buffer+0x9>
     23e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <adc_buffer+0x8>
	adc_buffer [5] = ADC_0_get_conversion(6);
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	2a d5       	rcall	.+2644   	; 0xc9a <ADC_0_get_conversion>
     246:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <adc_buffer+0xb>
     24a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <adc_buffer+0xa>
	adc_buffer [6] = ADC_0_get_conversion(7);
     24e:	87 e0       	ldi	r24, 0x07	; 7
     250:	24 d5       	rcall	.+2632   	; 0xc9a <ADC_0_get_conversion>
     252:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <adc_buffer+0xd>
     256:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <adc_buffer+0xc>
     25a:	00 00       	nop
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <sense_calibration>:
     262:	cf 93       	push	r28

void sense_calibration(){
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	e8 97       	sbiw	r28, 0x38	; 56
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
	
	uint32_t offset[8];	
	
	for (int y = 0; y < 8; y++){
     276:	1a 82       	std	Y+2, r1	; 0x02
     278:	19 82       	std	Y+1, r1	; 0x01
     27a:	16 c0       	rjmp	.+44     	; 0x2a8 <sense_calibration+0x46>
		offset[y] = 0;
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	9e 01       	movw	r18, r28
     28a:	2f 5f       	subi	r18, 0xFF	; 255
     28c:	3f 4f       	sbci	r19, 0xFF	; 255
     28e:	82 0f       	add	r24, r18
     290:	93 1f       	adc	r25, r19
     292:	48 96       	adiw	r24, 0x18	; 24
     294:	fc 01       	movw	r30, r24
     296:	10 82       	st	Z, r1
     298:	11 82       	std	Z+1, r1	; 0x01
     29a:	12 82       	std	Z+2, r1	; 0x02
     29c:	13 82       	std	Z+3, r1	; 0x03

void sense_calibration(){
	
	uint32_t offset[8];	
	
	for (int y = 0; y < 8; y++){
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	9a 81       	ldd	r25, Y+2	; 0x02
     2ac:	08 97       	sbiw	r24, 0x08	; 8
     2ae:	34 f3       	brlt	.-52     	; 0x27c <sense_calibration+0x1a>
		offset[y] = 0;
	}
	
	for (int x = 0; x < 100; x++){
     2b0:	1c 82       	std	Y+4, r1	; 0x04
     2b2:	1b 82       	std	Y+3, r1	; 0x03
     2b4:	b7 c0       	rjmp	.+366    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	a8 ec       	ldi	r26, 0xC8	; 200
     2bc:	b1 e4       	ldi	r27, 0x41	; 65
     2be:	8b 87       	std	Y+11, r24	; 0x0b
     2c0:	9c 87       	std	Y+12, r25	; 0x0c
     2c2:	ad 87       	std	Y+13, r26	; 0x0d
     2c4:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	4a ef       	ldi	r20, 0xFA	; 250
     2cc:	54 e4       	ldi	r21, 0x44	; 68
     2ce:	6b 85       	ldd	r22, Y+11	; 0x0b
     2d0:	7c 85       	ldd	r23, Y+12	; 0x0c
     2d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d4:	9e 85       	ldd	r25, Y+14	; 0x0e
     2d6:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__mulsf3>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	8f 87       	std	Y+15, r24	; 0x0f
     2e0:	98 8b       	std	Y+16, r25	; 0x10
     2e2:	a9 8b       	std	Y+17, r26	; 0x11
     2e4:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e8       	ldi	r20, 0x80	; 128
     2ec:	5f e3       	ldi	r21, 0x3F	; 63
     2ee:	6f 85       	ldd	r22, Y+15	; 0x0f
     2f0:	78 89       	ldd	r23, Y+16	; 0x10
     2f2:	89 89       	ldd	r24, Y+17	; 0x11
     2f4:	9a 89       	ldd	r25, Y+18	; 0x12
     2f6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__cmpsf2>
     2fa:	88 23       	and	r24, r24
     2fc:	2c f4       	brge	.+10     	; 0x308 <sense_calibration+0xa6>
		__ticks = 1;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	9c 8b       	std	Y+20, r25	; 0x14
     304:	8b 8b       	std	Y+19, r24	; 0x13
     306:	3f c0       	rjmp	.+126    	; 0x386 <sense_calibration+0x124>
	else if (__tmp > 65535)
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	3f ef       	ldi	r19, 0xFF	; 255
     30c:	4f e7       	ldi	r20, 0x7F	; 127
     30e:	57 e4       	ldi	r21, 0x47	; 71
     310:	6f 85       	ldd	r22, Y+15	; 0x0f
     312:	78 89       	ldd	r23, Y+16	; 0x10
     314:	89 89       	ldd	r24, Y+17	; 0x11
     316:	9a 89       	ldd	r25, Y+18	; 0x12
     318:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__gesf2>
     31c:	18 16       	cp	r1, r24
     31e:	4c f5       	brge	.+82     	; 0x372 <sense_calibration+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e2       	ldi	r20, 0x20	; 32
     326:	51 e4       	ldi	r21, 0x41	; 65
     328:	6b 85       	ldd	r22, Y+11	; 0x0b
     32a:	7c 85       	ldd	r23, Y+12	; 0x0c
     32c:	8d 85       	ldd	r24, Y+13	; 0x0d
     32e:	9e 85       	ldd	r25, Y+14	; 0x0e
     330:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__mulsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	bc 01       	movw	r22, r24
     33a:	cd 01       	movw	r24, r26
     33c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fixunssfsi>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	9c 8b       	std	Y+20, r25	; 0x14
     346:	8b 8b       	std	Y+19, r24	; 0x13
     348:	0f c0       	rjmp	.+30     	; 0x368 <sense_calibration+0x106>
     34a:	88 ec       	ldi	r24, 0xC8	; 200
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	9e 8b       	std	Y+22, r25	; 0x16
     350:	8d 8b       	std	Y+21, r24	; 0x15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     352:	8d 89       	ldd	r24, Y+21	; 0x15
     354:	9e 89       	ldd	r25, Y+22	; 0x16
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <sense_calibration+0xf4>
     35a:	9e 8b       	std	Y+22, r25	; 0x16
     35c:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     35e:	8b 89       	ldd	r24, Y+19	; 0x13
     360:	9c 89       	ldd	r25, Y+20	; 0x14
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	9c 8b       	std	Y+20, r25	; 0x14
     366:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     368:	8b 89       	ldd	r24, Y+19	; 0x13
     36a:	9c 89       	ldd	r25, Y+20	; 0x14
     36c:	89 2b       	or	r24, r25
     36e:	69 f7       	brne	.-38     	; 0x34a <sense_calibration+0xe8>
     370:	14 c0       	rjmp	.+40     	; 0x39a <sense_calibration+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     372:	6f 85       	ldd	r22, Y+15	; 0x0f
     374:	78 89       	ldd	r23, Y+16	; 0x10
     376:	89 89       	ldd	r24, Y+17	; 0x11
     378:	9a 89       	ldd	r25, Y+18	; 0x12
     37a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fixunssfsi>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	9c 8b       	std	Y+20, r25	; 0x14
     384:	8b 8b       	std	Y+19, r24	; 0x13
     386:	8b 89       	ldd	r24, Y+19	; 0x13
     388:	9c 89       	ldd	r25, Y+20	; 0x14
     38a:	98 8f       	std	Y+24, r25	; 0x18
     38c:	8f 8b       	std	Y+23, r24	; 0x17
     38e:	8f 89       	ldd	r24, Y+23	; 0x17
     390:	98 8d       	ldd	r25, Y+24	; 0x18
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <sense_calibration+0x130>
     396:	98 8f       	std	Y+24, r25	; 0x18
     398:	8f 8b       	std	Y+23, r24	; 0x17
		_delay_ms(25);
		adc_sync_read_sensor(); 
     39a:	2b df       	rcall	.-426    	; 0x1f2 <adc_sync_read_sensor>
		for (int y = 0; y < 8; y++){
     39c:	1e 82       	std	Y+6, r1	; 0x06
     39e:	1d 82       	std	Y+5, r1	; 0x05
     3a0:	38 c0       	rjmp	.+112    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			offset[y] = offset[y] + adc_buffer[y]; 
     3a2:	8d 81       	ldd	r24, Y+5	; 0x05
     3a4:	9e 81       	ldd	r25, Y+6	; 0x06
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	9e 01       	movw	r18, r28
     3b0:	2f 5f       	subi	r18, 0xFF	; 255
     3b2:	3f 4f       	sbci	r19, 0xFF	; 255
     3b4:	82 0f       	add	r24, r18
     3b6:	93 1f       	adc	r25, r19
     3b8:	48 96       	adiw	r24, 0x18	; 24
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 81       	ld	r18, Z
     3be:	31 81       	ldd	r19, Z+1	; 0x01
     3c0:	42 81       	ldd	r20, Z+2	; 0x02
     3c2:	53 81       	ldd	r21, Z+3	; 0x03
     3c4:	8d 81       	ldd	r24, Y+5	; 0x05
     3c6:	9e 81       	ldd	r25, Y+6	; 0x06
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	82 5c       	subi	r24, 0xC2	; 194
     3ce:	9d 4f       	sbci	r25, 0xFD	; 253
     3d0:	fc 01       	movw	r30, r24
     3d2:	80 81       	ld	r24, Z
     3d4:	91 81       	ldd	r25, Z+1	; 0x01
     3d6:	cc 01       	movw	r24, r24
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	82 0f       	add	r24, r18
     3de:	93 1f       	adc	r25, r19
     3e0:	a4 1f       	adc	r26, r20
     3e2:	b5 1f       	adc	r27, r21
     3e4:	2d 81       	ldd	r18, Y+5	; 0x05
     3e6:	3e 81       	ldd	r19, Y+6	; 0x06
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	22 0f       	add	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	ae 01       	movw	r20, r28
     3f2:	4f 5f       	subi	r20, 0xFF	; 255
     3f4:	5f 4f       	sbci	r21, 0xFF	; 255
     3f6:	24 0f       	add	r18, r20
     3f8:	35 1f       	adc	r19, r21
     3fa:	28 5e       	subi	r18, 0xE8	; 232
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	f9 01       	movw	r30, r18
     400:	80 83       	st	Z, r24
     402:	91 83       	std	Z+1, r25	; 0x01
     404:	a2 83       	std	Z+2, r26	; 0x02
     406:	b3 83       	std	Z+3, r27	; 0x03
	}
	
	for (int x = 0; x < 100; x++){
		_delay_ms(25);
		adc_sync_read_sensor(); 
		for (int y = 0; y < 8; y++){
     408:	8d 81       	ldd	r24, Y+5	; 0x05
     40a:	9e 81       	ldd	r25, Y+6	; 0x06
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	9e 83       	std	Y+6, r25	; 0x06
     410:	8d 83       	std	Y+5, r24	; 0x05
     412:	8d 81       	ldd	r24, Y+5	; 0x05
     414:	9e 81       	ldd	r25, Y+6	; 0x06
     416:	08 97       	sbiw	r24, 0x08	; 8
     418:	24 f2       	brlt	.-120    	; 0x3a2 <sense_calibration+0x140>
	
	for (int y = 0; y < 8; y++){
		offset[y] = 0;
	}
	
	for (int x = 0; x < 100; x++){
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	9c 81       	ldd	r25, Y+4	; 0x04
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	9c 83       	std	Y+4, r25	; 0x04
     422:	8b 83       	std	Y+3, r24	; 0x03
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	9c 81       	ldd	r25, Y+4	; 0x04
     428:	84 36       	cpi	r24, 0x64	; 100
     42a:	91 05       	cpc	r25, r1
     42c:	0c f4       	brge	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	43 cf       	rjmp	.-378    	; 0x2b6 <sense_calibration+0x54>
		adc_sync_read_sensor(); 
		for (int y = 0; y < 8; y++){
			offset[y] = offset[y] + adc_buffer[y]; 
		}	
	}
	for (int y = 0; y < 8; y++){
     430:	18 86       	std	Y+8, r1	; 0x08
     432:	1f 82       	std	Y+7, r1	; 0x07
     434:	2a c0       	rjmp	.+84     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		sense_min_val[y] = offset[y] /100;
     436:	8f 81       	ldd	r24, Y+7	; 0x07
     438:	98 85       	ldd	r25, Y+8	; 0x08
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	9e 01       	movw	r18, r28
     444:	2f 5f       	subi	r18, 0xFF	; 255
     446:	3f 4f       	sbci	r19, 0xFF	; 255
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	48 96       	adiw	r24, 0x18	; 24
     44e:	fc 01       	movw	r30, r24
     450:	80 81       	ld	r24, Z
     452:	91 81       	ldd	r25, Z+1	; 0x01
     454:	a2 81       	ldd	r26, Z+2	; 0x02
     456:	b3 81       	ldd	r27, Z+3	; 0x03
     458:	24 e6       	ldi	r18, 0x64	; 100
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	bc 01       	movw	r22, r24
     462:	cd 01       	movw	r24, r26
     464:	0e 94 29 10 	call	0x2052	; 0x2052 <__udivmodsi4>
     468:	da 01       	movw	r26, r20
     46a:	c9 01       	movw	r24, r18
     46c:	9c 01       	movw	r18, r24
     46e:	8f 81       	ldd	r24, Y+7	; 0x07
     470:	98 85       	ldd	r25, Y+8	; 0x08
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	82 5e       	subi	r24, 0xE2	; 226
     478:	9d 4f       	sbci	r25, 0xFD	; 253
     47a:	fc 01       	movw	r30, r24
     47c:	31 83       	std	Z+1, r19	; 0x01
     47e:	20 83       	st	Z, r18
		adc_sync_read_sensor(); 
		for (int y = 0; y < 8; y++){
			offset[y] = offset[y] + adc_buffer[y]; 
		}	
	}
	for (int y = 0; y < 8; y++){
     480:	8f 81       	ldd	r24, Y+7	; 0x07
     482:	98 85       	ldd	r25, Y+8	; 0x08
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	98 87       	std	Y+8, r25	; 0x08
     488:	8f 83       	std	Y+7, r24	; 0x07
     48a:	8f 81       	ldd	r24, Y+7	; 0x07
     48c:	98 85       	ldd	r25, Y+8	; 0x08
     48e:	08 97       	sbiw	r24, 0x08	; 8
     490:	94 f2       	brlt	.-92     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		sense_min_val[y] = offset[y] /100;
	}
	
	for (int y = 0; y < 8; y++){
     492:	1a 86       	std	Y+10, r1	; 0x0a
     494:	19 86       	std	Y+9, r1	; 0x09
     496:	16 c0       	rjmp	.+44     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		offset[y] = 0;
     498:	89 85       	ldd	r24, Y+9	; 0x09
     49a:	9a 85       	ldd	r25, Y+10	; 0x0a
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	9e 01       	movw	r18, r28
     4a6:	2f 5f       	subi	r18, 0xFF	; 255
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	48 96       	adiw	r24, 0x18	; 24
     4b0:	fc 01       	movw	r30, r24
     4b2:	10 82       	st	Z, r1
     4b4:	11 82       	std	Z+1, r1	; 0x01
     4b6:	12 82       	std	Z+2, r1	; 0x02
     4b8:	13 82       	std	Z+3, r1	; 0x03
	}
	for (int y = 0; y < 8; y++){
		sense_min_val[y] = offset[y] /100;
	}
	
	for (int y = 0; y < 8; y++){
     4ba:	89 85       	ldd	r24, Y+9	; 0x09
     4bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	9a 87       	std	Y+10, r25	; 0x0a
     4c2:	89 87       	std	Y+9, r24	; 0x09
     4c4:	89 85       	ldd	r24, Y+9	; 0x09
     4c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c8:	08 97       	sbiw	r24, 0x08	; 8
     4ca:	34 f3       	brlt	.-52     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	}
	for (int y = 0; y < 8; y++){
		sense_max_val[y] = offset[y] /100;
	}
	*/
}
     4cc:	00 00       	nop
     4ce:	e8 96       	adiw	r28, 0x38	; 56
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <get_line_pos>:

void get_line_pos(){
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	1f 92       	push	r1
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
	
		for (int y = 0; y < 8; y++){
     4ec:	1a 82       	std	Y+2, r1	; 0x02
     4ee:	19 82       	std	Y+1, r1	; 0x01
     4f0:	2a c0       	rjmp	.+84     	; 0x546 <get_line_pos+0x66>
			if (adc_buffer[y] > sense_min_val[y]+MIN_BOOL_OFFSET){
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	82 5c       	subi	r24, 0xC2	; 194
     4fc:	9d 4f       	sbci	r25, 0xFD	; 253
     4fe:	fc 01       	movw	r30, r24
     500:	20 81       	ld	r18, Z
     502:	31 81       	ldd	r19, Z+1	; 0x01
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	82 5e       	subi	r24, 0xE2	; 226
     50e:	9d 4f       	sbci	r25, 0xFD	; 253
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	91 81       	ldd	r25, Z+1	; 0x01
     516:	8c 59       	subi	r24, 0x9C	; 156
     518:	9f 4f       	sbci	r25, 0xFF	; 255
     51a:	82 17       	cp	r24, r18
     51c:	93 07       	cpc	r25, r19
     51e:	40 f4       	brcc	.+16     	; 0x530 <get_line_pos+0x50>
				sense_line[y] = true; 		
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	82 5b       	subi	r24, 0xB2	; 178
     526:	9d 4f       	sbci	r25, 0xFD	; 253
     528:	21 e0       	ldi	r18, 0x01	; 1
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
     52e:	06 c0       	rjmp	.+12     	; 0x53c <get_line_pos+0x5c>
			}
			else{
				sense_line[y] = false; 
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	82 5b       	subi	r24, 0xB2	; 178
     536:	9d 4f       	sbci	r25, 0xFD	; 253
     538:	fc 01       	movw	r30, r24
     53a:	10 82       	st	Z, r1
	*/
}

void get_line_pos(){
	
		for (int y = 0; y < 8; y++){
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	9a 83       	std	Y+2, r25	; 0x02
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	08 97       	sbiw	r24, 0x08	; 8
     54c:	94 f2       	brlt	.-92     	; 0x4f2 <get_line_pos+0x12>
			}
			else{
				sense_line[y] = false; 
			}	
		}
}
     54e:	00 00       	nop
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <get_error>:

void get_error(){
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	a4 97       	sbiw	r28, 0x24	; 36
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
	int32_t sense[8];
	for (int y = 0; y < 8; y++){
     576:	1a 82       	std	Y+2, r1	; 0x02
     578:	19 82       	std	Y+1, r1	; 0x01
     57a:	16 c0       	rjmp	.+44     	; 0x5a8 <get_error+0x4e>
			sense[y] = 0;  		
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	9e 01       	movw	r18, r28
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	82 0f       	add	r24, r18
     590:	93 1f       	adc	r25, r19
     592:	04 96       	adiw	r24, 0x04	; 4
     594:	fc 01       	movw	r30, r24
     596:	10 82       	st	Z, r1
     598:	11 82       	std	Z+1, r1	; 0x01
     59a:	12 82       	std	Z+2, r1	; 0x02
     59c:	13 82       	std	Z+3, r1	; 0x03
		}
}

void get_error(){
	int32_t sense[8];
	for (int y = 0; y < 8; y++){
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	9a 81       	ldd	r25, Y+2	; 0x02
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	9a 83       	std	Y+2, r25	; 0x02
     5a6:	89 83       	std	Y+1, r24	; 0x01
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	08 97       	sbiw	r24, 0x08	; 8
     5ae:	34 f3       	brlt	.-52     	; 0x57c <get_error+0x22>
			sense[y] = 0;  		
			}
	
	for (int y = 0; y < 8; y++){
     5b0:	1c 82       	std	Y+4, r1	; 0x04
     5b2:	1b 82       	std	Y+3, r1	; 0x03
     5b4:	7f c0       	rjmp	.+254    	; 0x6b4 <get_error+0x15a>
			sense[y] = adc_buffer[y];
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	82 5c       	subi	r24, 0xC2	; 194
     5c0:	9d 4f       	sbci	r25, 0xFD	; 253
     5c2:	fc 01       	movw	r30, r24
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	cc 01       	movw	r24, r24
     5ca:	a0 e0       	ldi	r26, 0x00	; 0
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	2b 81       	ldd	r18, Y+3	; 0x03
     5d0:	3c 81       	ldd	r19, Y+4	; 0x04
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	ae 01       	movw	r20, r28
     5dc:	4f 5f       	subi	r20, 0xFF	; 255
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
     5e0:	24 0f       	add	r18, r20
     5e2:	35 1f       	adc	r19, r21
     5e4:	2c 5f       	subi	r18, 0xFC	; 252
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	f9 01       	movw	r30, r18
     5ea:	80 83       	st	Z, r24
     5ec:	91 83       	std	Z+1, r25	; 0x01
     5ee:	a2 83       	std	Z+2, r26	; 0x02
     5f0:	b3 83       	std	Z+3, r27	; 0x03
			sense[y] = sense[y] - (sense_min_val[y]+MIN_ERROR_OFFSET);
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	9c 81       	ldd	r25, Y+4	; 0x04
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	9e 01       	movw	r18, r28
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	82 0f       	add	r24, r18
     606:	93 1f       	adc	r25, r19
     608:	04 96       	adiw	r24, 0x04	; 4
     60a:	fc 01       	movw	r30, r24
     60c:	20 81       	ld	r18, Z
     60e:	31 81       	ldd	r19, Z+1	; 0x01
     610:	42 81       	ldd	r20, Z+2	; 0x02
     612:	53 81       	ldd	r21, Z+3	; 0x03
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	82 5e       	subi	r24, 0xE2	; 226
     61e:	9d 4f       	sbci	r25, 0xFD	; 253
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
     624:	91 81       	ldd	r25, Z+1	; 0x01
     626:	49 96       	adiw	r24, 0x19	; 25
     628:	cc 01       	movw	r24, r24
     62a:	a0 e0       	ldi	r26, 0x00	; 0
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	79 01       	movw	r14, r18
     630:	8a 01       	movw	r16, r20
     632:	e8 1a       	sub	r14, r24
     634:	f9 0a       	sbc	r15, r25
     636:	0a 0b       	sbc	r16, r26
     638:	1b 0b       	sbc	r17, r27
     63a:	d8 01       	movw	r26, r16
     63c:	c7 01       	movw	r24, r14
     63e:	2b 81       	ldd	r18, Y+3	; 0x03
     640:	3c 81       	ldd	r19, Y+4	; 0x04
     642:	22 0f       	add	r18, r18
     644:	33 1f       	adc	r19, r19
     646:	22 0f       	add	r18, r18
     648:	33 1f       	adc	r19, r19
     64a:	ae 01       	movw	r20, r28
     64c:	4f 5f       	subi	r20, 0xFF	; 255
     64e:	5f 4f       	sbci	r21, 0xFF	; 255
     650:	24 0f       	add	r18, r20
     652:	35 1f       	adc	r19, r21
     654:	2c 5f       	subi	r18, 0xFC	; 252
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	f9 01       	movw	r30, r18
     65a:	80 83       	st	Z, r24
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	a2 83       	std	Z+2, r26	; 0x02
     660:	b3 83       	std	Z+3, r27	; 0x03
			if (sense[y]<0){
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	9e 01       	movw	r18, r28
     670:	2f 5f       	subi	r18, 0xFF	; 255
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	04 96       	adiw	r24, 0x04	; 4
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	a2 81       	ldd	r26, Z+2	; 0x02
     682:	b3 81       	ldd	r27, Z+3	; 0x03
     684:	bb 23       	and	r27, r27
     686:	8c f4       	brge	.+34     	; 0x6aa <get_error+0x150>
				sense[y] = 0; 
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	9e 01       	movw	r18, r28
     696:	2f 5f       	subi	r18, 0xFF	; 255
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	82 0f       	add	r24, r18
     69c:	93 1f       	adc	r25, r19
     69e:	04 96       	adiw	r24, 0x04	; 4
     6a0:	fc 01       	movw	r30, r24
     6a2:	10 82       	st	Z, r1
     6a4:	11 82       	std	Z+1, r1	; 0x01
     6a6:	12 82       	std	Z+2, r1	; 0x02
     6a8:	13 82       	std	Z+3, r1	; 0x03
	int32_t sense[8];
	for (int y = 0; y < 8; y++){
			sense[y] = 0;  		
			}
	
	for (int y = 0; y < 8; y++){
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	9c 83       	std	Y+4, r25	; 0x04
     6b2:	8b 83       	std	Y+3, r24	; 0x03
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	08 97       	sbiw	r24, 0x08	; 8
     6ba:	0c f4       	brge	.+2      	; 0x6be <get_error+0x164>
     6bc:	7c cf       	rjmp	.-264    	; 0x5b6 <get_error+0x5c>
				sense[y] = 0; 
			}		
			}
	
	
	error = 4* sense[0]+3*sense[1]+2*sense[2]+sense[3]-sense[4]-2*sense[5]-3*sense[6]-4*sense[7];
     6be:	8d 81       	ldd	r24, Y+5	; 0x05
     6c0:	9e 81       	ldd	r25, Y+6	; 0x06
     6c2:	af 81       	ldd	r26, Y+7	; 0x07
     6c4:	b8 85       	ldd	r27, Y+8	; 0x08
     6c6:	7c 01       	movw	r14, r24
     6c8:	8d 01       	movw	r16, r26
     6ca:	ee 0c       	add	r14, r14
     6cc:	ff 1c       	adc	r15, r15
     6ce:	00 1f       	adc	r16, r16
     6d0:	11 1f       	adc	r17, r17
     6d2:	ee 0c       	add	r14, r14
     6d4:	ff 1c       	adc	r15, r15
     6d6:	00 1f       	adc	r16, r16
     6d8:	11 1f       	adc	r17, r17
     6da:	29 85       	ldd	r18, Y+9	; 0x09
     6dc:	3a 85       	ldd	r19, Y+10	; 0x0a
     6de:	4b 85       	ldd	r20, Y+11	; 0x0b
     6e0:	5c 85       	ldd	r21, Y+12	; 0x0c
     6e2:	da 01       	movw	r26, r20
     6e4:	c9 01       	movw	r24, r18
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	aa 1f       	adc	r26, r26
     6ec:	bb 1f       	adc	r27, r27
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	a4 1f       	adc	r26, r20
     6f4:	b5 1f       	adc	r27, r21
     6f6:	a8 01       	movw	r20, r16
     6f8:	97 01       	movw	r18, r14
     6fa:	28 0f       	add	r18, r24
     6fc:	39 1f       	adc	r19, r25
     6fe:	4a 1f       	adc	r20, r26
     700:	5b 1f       	adc	r21, r27
     702:	8d 85       	ldd	r24, Y+13	; 0x0d
     704:	9e 85       	ldd	r25, Y+14	; 0x0e
     706:	af 85       	ldd	r26, Y+15	; 0x0f
     708:	b8 89       	ldd	r27, Y+16	; 0x10
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	aa 1f       	adc	r26, r26
     710:	bb 1f       	adc	r27, r27
     712:	28 0f       	add	r18, r24
     714:	39 1f       	adc	r19, r25
     716:	4a 1f       	adc	r20, r26
     718:	5b 1f       	adc	r21, r27
     71a:	89 89       	ldd	r24, Y+17	; 0x11
     71c:	9a 89       	ldd	r25, Y+18	; 0x12
     71e:	ab 89       	ldd	r26, Y+19	; 0x13
     720:	bc 89       	ldd	r27, Y+20	; 0x14
     722:	28 0f       	add	r18, r24
     724:	39 1f       	adc	r19, r25
     726:	4a 1f       	adc	r20, r26
     728:	5b 1f       	adc	r21, r27
     72a:	8d 89       	ldd	r24, Y+21	; 0x15
     72c:	9e 89       	ldd	r25, Y+22	; 0x16
     72e:	af 89       	ldd	r26, Y+23	; 0x17
     730:	b8 8d       	ldd	r27, Y+24	; 0x18
     732:	28 1b       	sub	r18, r24
     734:	39 0b       	sbc	r19, r25
     736:	4a 0b       	sbc	r20, r26
     738:	5b 0b       	sbc	r21, r27
     73a:	89 8d       	ldd	r24, Y+25	; 0x19
     73c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     73e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     740:	bc 8d       	ldd	r27, Y+28	; 0x1c
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	aa 1f       	adc	r26, r26
     748:	bb 1f       	adc	r27, r27
     74a:	79 01       	movw	r14, r18
     74c:	8a 01       	movw	r16, r20
     74e:	e8 1a       	sub	r14, r24
     750:	f9 0a       	sbc	r15, r25
     752:	0a 0b       	sbc	r16, r26
     754:	1b 0b       	sbc	r17, r27
     756:	2d 8d       	ldd	r18, Y+29	; 0x1d
     758:	3e 8d       	ldd	r19, Y+30	; 0x1e
     75a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     75c:	58 a1       	ldd	r21, Y+32	; 0x20
     75e:	da 01       	movw	r26, r20
     760:	c9 01       	movw	r24, r18
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	aa 1f       	adc	r26, r26
     768:	bb 1f       	adc	r27, r27
     76a:	82 0f       	add	r24, r18
     76c:	93 1f       	adc	r25, r19
     76e:	a4 1f       	adc	r26, r20
     770:	b5 1f       	adc	r27, r21
     772:	b0 95       	com	r27
     774:	a0 95       	com	r26
     776:	90 95       	com	r25
     778:	81 95       	neg	r24
     77a:	9f 4f       	sbci	r25, 0xFF	; 255
     77c:	af 4f       	sbci	r26, 0xFF	; 255
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	a8 01       	movw	r20, r16
     782:	97 01       	movw	r18, r14
     784:	28 0f       	add	r18, r24
     786:	39 1f       	adc	r19, r25
     788:	4a 1f       	adc	r20, r26
     78a:	5b 1f       	adc	r21, r27
     78c:	89 a1       	ldd	r24, Y+33	; 0x21
     78e:	9a a1       	ldd	r25, Y+34	; 0x22
     790:	ab a1       	ldd	r26, Y+35	; 0x23
     792:	bc a1       	ldd	r27, Y+36	; 0x24
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	aa 1f       	adc	r26, r26
     79a:	bb 1f       	adc	r27, r27
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	aa 1f       	adc	r26, r26
     7a2:	bb 1f       	adc	r27, r27
     7a4:	79 01       	movw	r14, r18
     7a6:	8a 01       	movw	r16, r20
     7a8:	e8 1a       	sub	r14, r24
     7aa:	f9 0a       	sbc	r15, r25
     7ac:	0a 0b       	sbc	r16, r26
     7ae:	1b 0b       	sbc	r17, r27
     7b0:	d8 01       	movw	r26, r16
     7b2:	c7 01       	movw	r24, r14
     7b4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     7b8:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
     7bc:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end+0x2>
     7c0:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x3>
	
	
}
     7c4:	00 00       	nop
     7c6:	a4 96       	adiw	r28, 0x24	; 36
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	08 95       	ret

000007e0 <get_pid>:

void get_pid(){
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
	static int32_t integral; 
	static int32_t last_error; 
	static int32_t derivate; 
	
	if (error>INTEGRAL_OFFSET && error<INTEGRAL_OFFSET)
     7f4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     7f8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     7fc:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     800:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     804:	85 36       	cpi	r24, 0x65	; 101
     806:	91 05       	cpc	r25, r1
     808:	a1 05       	cpc	r26, r1
     80a:	b1 05       	cpc	r27, r1
     80c:	4c f1       	brlt	.+82     	; 0x860 <get_pid+0x80>
     80e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     812:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     816:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     81a:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     81e:	84 36       	cpi	r24, 0x64	; 100
     820:	91 05       	cpc	r25, r1
     822:	a1 05       	cpc	r26, r1
     824:	b1 05       	cpc	r27, r1
     826:	e4 f4       	brge	.+56     	; 0x860 <get_pid+0x80>
	{
		integral = integral + error; 
     828:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <integral.2679>
     82c:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <integral.2679+0x1>
     830:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <integral.2679+0x2>
     834:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <integral.2679+0x3>
     838:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     83c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     840:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     844:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	a4 1f       	adc	r26, r20
     84e:	b5 1f       	adc	r27, r21
     850:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <integral.2679>
     854:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <integral.2679+0x1>
     858:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <integral.2679+0x2>
     85c:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <integral.2679+0x3>
	}
	
	derivate = error - last_error; 
     860:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__data_end>
     864:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__data_end+0x1>
     868:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <__data_end+0x2>
     86c:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <__data_end+0x3>
     870:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <last_error.2680>
     874:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <last_error.2680+0x1>
     878:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <last_error.2680+0x2>
     87c:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <last_error.2680+0x3>
     880:	79 01       	movw	r14, r18
     882:	8a 01       	movw	r16, r20
     884:	e8 1a       	sub	r14, r24
     886:	f9 0a       	sbc	r15, r25
     888:	0a 0b       	sbc	r16, r26
     88a:	1b 0b       	sbc	r17, r27
     88c:	d8 01       	movw	r26, r16
     88e:	c7 01       	movw	r24, r14
     890:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <derivate.2681>
     894:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <derivate.2681+0x1>
     898:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <derivate.2681+0x2>
     89c:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <derivate.2681+0x3>
		
	last_error = error; 
     8a0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     8a4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     8a8:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     8ac:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     8b0:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <last_error.2680>
     8b4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <last_error.2680+0x1>
     8b8:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <last_error.2680+0x2>
     8bc:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <last_error.2680+0x3>
	
	oper_pwm = (KP*error)+(Ki*integral)+(KD*derivate); 
     8c0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     8c4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     8c8:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     8cc:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__floatsisf>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	2d ec       	ldi	r18, 0xCD	; 205
     8de:	3c ec       	ldi	r19, 0xCC	; 204
     8e0:	4c ec       	ldi	r20, 0xCC	; 204
     8e2:	5d e3       	ldi	r21, 0x3D	; 61
     8e4:	bc 01       	movw	r22, r24
     8e6:	cd 01       	movw	r24, r26
     8e8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__mulsf3>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	6c 01       	movw	r12, r24
     8f2:	7d 01       	movw	r14, r26
     8f4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <integral.2679>
     8f8:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <integral.2679+0x1>
     8fc:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <integral.2679+0x2>
     900:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <integral.2679+0x3>
     904:	bc 01       	movw	r22, r24
     906:	cd 01       	movw	r24, r26
     908:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__floatsisf>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	2d ec       	ldi	r18, 0xCD	; 205
     912:	3c ec       	ldi	r19, 0xCC	; 204
     914:	4c ec       	ldi	r20, 0xCC	; 204
     916:	5d e3       	ldi	r21, 0x3D	; 61
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__mulsf3>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	9c 01       	movw	r18, r24
     926:	ad 01       	movw	r20, r26
     928:	c7 01       	movw	r24, r14
     92a:	b6 01       	movw	r22, r12
     92c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	6c 01       	movw	r12, r24
     936:	7d 01       	movw	r14, r26
     938:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <derivate.2681>
     93c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <derivate.2681+0x1>
     940:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <derivate.2681+0x2>
     944:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <derivate.2681+0x3>
     948:	bc 01       	movw	r22, r24
     94a:	cd 01       	movw	r24, r26
     94c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__floatsisf>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	2d ec       	ldi	r18, 0xCD	; 205
     956:	3c ec       	ldi	r19, 0xCC	; 204
     958:	4c ec       	ldi	r20, 0xCC	; 204
     95a:	5d e3       	ldi	r21, 0x3D	; 61
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__mulsf3>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	9c 01       	movw	r18, r24
     96a:	ad 01       	movw	r20, r26
     96c:	c7 01       	movw	r24, r14
     96e:	b6 01       	movw	r22, r12
     970:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__fixsfsi>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <oper_pwm>
     988:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <oper_pwm+0x1>
     98c:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <oper_pwm+0x2>
     990:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <oper_pwm+0x3>
}
     994:	00 00       	nop
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	08 95       	ret

000009a8 <__vector_21>:

/*PWM 1*/
ISR(TIMER0_COMPA_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     9b8:	0f 92       	push	r0
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
	static uint_fast16_t counter;
	
	if (counter == 1) {
     9da:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <counter.2687>
     9de:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <counter.2687+0x1>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	11 f4       	brne	.+4      	; 0x9ea <__vector_21+0x42>
		PIN_PWM_1_set_level(false);
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	f6 db       	rcall	.-2068   	; 0x1d6 <PIN_PWM_1_set_level>
	}
	if (counter == pwm_1){
     9ea:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <counter.2687>
     9ee:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <counter.2687+0x1>
     9f2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     9f6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     9fa:	82 17       	cp	r24, r18
     9fc:	93 07       	cpc	r25, r19
     9fe:	11 f4       	brne	.+4      	; 0xa04 <__vector_21+0x5c>
		PIN_PWM_1_set_level(true); 
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	e9 db       	rcall	.-2094   	; 0x1d6 <PIN_PWM_1_set_level>
	}
	if(counter == 500){
     a04:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <counter.2687>
     a08:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <counter.2687+0x1>
     a0c:	84 3f       	cpi	r24, 0xF4	; 244
     a0e:	91 40       	sbci	r25, 0x01	; 1
     a10:	21 f4       	brne	.+8      	; 0xa1a <__vector_21+0x72>
		counter = 0; 
     a12:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <counter.2687+0x1>
     a16:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <counter.2687>
	}
	
	counter++;
     a1a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <counter.2687>
     a1e:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <counter.2687+0x1>
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <counter.2687+0x1>
     a28:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <counter.2687>
}
     a2c:	00 00       	nop
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	bf 91       	pop	r27
     a38:	af 91       	pop	r26
     a3a:	9f 91       	pop	r25
     a3c:	8f 91       	pop	r24
     a3e:	7f 91       	pop	r23
     a40:	6f 91       	pop	r22
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     a50:	0f 90       	pop	r0
     a52:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_13>:
/*PWM 2*/
ISR(TIMER2_COMPA_vect)
{
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     a64:	0f 92       	push	r0
     a66:	11 24       	eor	r1, r1
     a68:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     a6c:	0f 92       	push	r0
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
	static uint_fast16_t counter;
	
	if (counter == 1) {
     a8e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <counter.2693>
     a92:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <counter.2693+0x1>
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	11 f4       	brne	.+4      	; 0xa9e <__vector_13+0x42>
		PIN_PWM_1_set_level(false);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	9c db       	rcall	.-2248   	; 0x1d6 <PIN_PWM_1_set_level>
	}
	if (counter == pwm_2){
     a9e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <counter.2693>
     aa2:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <counter.2693+0x1>
     aa6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwm_2>
     aaa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwm_2+0x1>
     aae:	82 17       	cp	r24, r18
     ab0:	93 07       	cpc	r25, r19
     ab2:	11 f4       	brne	.+4      	; 0xab8 <__vector_13+0x5c>
		PIN_PWM_1_set_level(true); 
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	8f db       	rcall	.-2274   	; 0x1d6 <PIN_PWM_1_set_level>
	}
	if(counter == 500){
     ab8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <counter.2693>
     abc:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <counter.2693+0x1>
     ac0:	84 3f       	cpi	r24, 0xF4	; 244
     ac2:	91 40       	sbci	r25, 0x01	; 1
     ac4:	21 f4       	brne	.+8      	; 0xace <__vector_13+0x72>
		counter = 0; 
     ac6:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <counter.2693+0x1>
     aca:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <counter.2693>
	}
	
	counter++;
     ace:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <counter.2693>
     ad2:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <counter.2693+0x1>
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <counter.2693+0x1>
     adc:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <counter.2693>
}
     ae0:	00 00       	nop
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     b04:	0f 90       	pop	r0
     b06:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     b20:	0f 92       	push	r0
     b22:	2f 93       	push	r18
     b24:	3f 93       	push	r19
     b26:	4f 93       	push	r20
     b28:	5f 93       	push	r21
     b2a:	6f 93       	push	r22
     b2c:	7f 93       	push	r23
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	af 93       	push	r26
     b34:	bf 93       	push	r27
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
	adc_sync_read_sensor();
     b42:	57 db       	rcall	.-2386   	; 0x1f2 <adc_sync_read_sensor>
	get_line_pos();
     b44:	cd dc       	rcall	.-1638   	; 0x4e0 <get_line_pos>
	get_error();
     b46:	09 dd       	rcall	.-1518   	; 0x55a <get_error>
     b48:	4b de       	rcall	.-874    	; 0x7e0 <get_pid>
	get_pid(); 
     b4a:	00 00       	nop
     b4c:	df 91       	pop	r29
				
}
     b4e:	cf 91       	pop	r28
     b50:	ff 91       	pop	r31
     b52:	ef 91       	pop	r30
     b54:	bf 91       	pop	r27
     b56:	af 91       	pop	r26
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	7f 91       	pop	r23
     b5e:	6f 91       	pop	r22
     b60:	5f 91       	pop	r21
     b62:	4f 91       	pop	r20
     b64:	3f 91       	pop	r19
     b66:	2f 91       	pop	r18
     b68:	0f 90       	pop	r0
     b6a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     b6e:	0f 90       	pop	r0
     b70:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <main>:
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
int main(void)
{
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     b82:	d1 da       	rcall	.-2654   	; 0x126 <atmel_start_init>
	sense_calibration();
     b84:	6e db       	rcall	.-2340   	; 0x262 <sense_calibration>
     b86:	78 94       	sei
	ENABLE_INTERRUPTS();
     b88:	83 eb       	ldi	r24, 0xB3	; 179
		
	OCR2A =0xaa;
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	2a ea       	ldi	r18, 0xAA	; 170
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
     b92:	87 e4       	ldi	r24, 0x47	; 71
	OCR0A =0xaa; 
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	2a ea       	ldi	r18, 0xAA	; 170
     b98:	fc 01       	movw	r30, r24
     b9a:	20 83       	st	Z, r18
     b9c:	88 e8       	ldi	r24, 0x88	; 136
	
	OCR1A = 1000; // 1ms
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	28 ee       	ldi	r18, 0xE8	; 232
     ba2:	33 e0       	ldi	r19, 0x03	; 3
     ba4:	fc 01       	movw	r30, r24
     ba6:	31 83       	std	Z+1, r19	; 0x01
     ba8:	20 83       	st	Z, r18
     baa:	ff cf       	rjmp	.-2      	; 0xbaa <main+0x30>

00000bac <ADC_0_init>:
	
	/* Replace with your application code */
	while (1) {
	}
     bac:	cf 93       	push	r28
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
}
     bae:	df 93       	push	r29
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	84 e6       	ldi	r24, 0x64	; 100
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	24 e6       	ldi	r18, 0x64	; 100
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	f9 01       	movw	r30, r18
     bbe:	20 81       	ld	r18, Z
     bc0:	2e 7f       	andi	r18, 0xFE	; 254
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
     bc6:	8c e7       	ldi	r24, 0x7C	; 124
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	20 e4       	ldi	r18, 0x40	; 64
     bcc:	fc 01       	movw	r30, r24
     bce:	20 83       	st	Z, r18
     bd0:	8a e7       	ldi	r24, 0x7A	; 122
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	2d ea       	ldi	r18, 0xAD	; 173
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
     bda:	8b e7       	ldi	r24, 0x7B	; 123
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	28 e0       	ldi	r18, 0x08	; 8
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
     be4:	8d e7       	ldi	r24, 0x7D	; 125
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <ADC_0_start_conversion>:
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	1f 92       	push	r1
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	8c e7       	ldi	r24, 0x7C	; 124
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	2c e7       	ldi	r18, 0x7C	; 124
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	f9 01       	movw	r30, r18
     c0c:	20 81       	ld	r18, Z
     c0e:	20 7e       	andi	r18, 0xE0	; 224
     c10:	fc 01       	movw	r30, r24
     c12:	20 83       	st	Z, r18
     c14:	8c e7       	ldi	r24, 0x7C	; 124
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	2c e7       	ldi	r18, 0x7C	; 124
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	f9 01       	movw	r30, r18
     c1e:	30 81       	ld	r19, Z
     c20:	29 81       	ldd	r18, Y+1	; 0x01
     c22:	23 2b       	or	r18, r19
     c24:	fc 01       	movw	r30, r24
     c26:	20 83       	st	Z, r18
     c28:	8a e7       	ldi	r24, 0x7A	; 122
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	2a e7       	ldi	r18, 0x7A	; 122
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	f9 01       	movw	r30, r18
     c32:	20 81       	ld	r18, Z
     c34:	20 64       	ori	r18, 0x40	; 64
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18
     c3a:	00 00       	nop
     c3c:	0f 90       	pop	r0
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <ADC_0_is_conversion_done>:
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	8a e7       	ldi	r24, 0x7A	; 122
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	fc 01       	movw	r30, r24
     c52:	80 81       	ld	r24, Z
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	80 71       	andi	r24, 0x10	; 16
     c5a:	99 27       	eor	r25, r25
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	89 2b       	or	r24, r25
     c60:	09 f4       	brne	.+2      	; 0xc64 <ADC_0_is_conversion_done+0x20>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	82 2f       	mov	r24, r18
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <ADC_0_get_conversion_result>:
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	88 e7       	ldi	r24, 0x78	; 120
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fc 01       	movw	r30, r24
     c7a:	80 81       	ld	r24, Z
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	89 e7       	ldi	r24, 0x79	; 121
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	98 2f       	mov	r25, r24
     c8e:	88 27       	eor	r24, r24
     c90:	82 2b       	or	r24, r18
     c92:	93 2b       	or	r25, r19
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <ADC_0_get_conversion>:
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <ADC_0_get_conversion+0x6>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	8b 83       	std	Y+3, r24	; 0x03
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	a6 df       	rcall	.-180    	; 0xbf6 <ADC_0_start_conversion>
     caa:	00 00       	nop
     cac:	cb df       	rcall	.-106    	; 0xc44 <ADC_0_is_conversion_done>
     cae:	98 2f       	mov	r25, r24
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	89 27       	eor	r24, r25
     cb4:	88 23       	and	r24, r24
     cb6:	d1 f7       	brne	.-12     	; 0xcac <ADC_0_get_conversion+0x12>
     cb8:	d9 df       	rcall	.-78     	; 0xc6c <ADC_0_get_conversion_result>
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	8a e7       	ldi	r24, 0x7A	; 122
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	2a e7       	ldi	r18, 0x7A	; 122
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	f9 01       	movw	r30, r18
     cc8:	20 81       	ld	r18, Z
     cca:	20 61       	ori	r18, 0x10	; 16
     ccc:	fc 01       	movw	r30, r24
     cce:	20 83       	st	Z, r18
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <__vector_29>:

ISR(ADC_vect)
{
     ce0:	1f 92       	push	r1
     ce2:	0f 92       	push	r0
     ce4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     cf0:	0f 92       	push	r0
     cf2:	2f 93       	push	r18
     cf4:	3f 93       	push	r19
     cf6:	4f 93       	push	r20
     cf8:	5f 93       	push	r21
     cfa:	6f 93       	push	r22
     cfc:	7f 93       	push	r23
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	af 93       	push	r26
     d04:	bf 93       	push	r27
     d06:	ef 93       	push	r30
     d08:	ff 93       	push	r31
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62

	if (ADC_0_cb != NULL) {
     d12:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <ADC_0_cb>
     d16:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <ADC_0_cb+0x1>
     d1a:	89 2b       	or	r24, r25
     d1c:	31 f0       	breq	.+12     	; 0xd2a <__vector_29+0x4a>
		ADC_0_cb();
     d1e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <ADC_0_cb>
     d22:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <ADC_0_cb+0x1>
     d26:	fc 01       	movw	r30, r24
     d28:	19 95       	eicall
	}
}
     d2a:	00 00       	nop
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     d4e:	0f 90       	pop	r0
     d50:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <PORTA_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	1f 92       	push	r1
     d60:	1f 92       	push	r1
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	99 f0       	breq	.+38     	; 0xd9c <PORTA_set_port_dir+0x42>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	91 05       	cpc	r25, r1
     d7a:	d9 f0       	breq	.+54     	; 0xdb2 <PORTA_set_port_dir+0x58>
     d7c:	89 2b       	or	r24, r25
     d7e:	09 f0       	breq	.+2      	; 0xd82 <PORTA_set_port_dir+0x28>
		DDRA &= ~mask;

		PORTA |= mask;
		break;
	default:
		break;
     d80:	2f c0       	rjmp	.+94     	; 0xde0 <PORTA_set_port_dir+0x86>
 */
static inline void PORTA_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~mask;
     d82:	81 e2       	ldi	r24, 0x21	; 33
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	21 e2       	ldi	r18, 0x21	; 33
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	20 81       	ld	r18, Z
     d8e:	32 2f       	mov	r19, r18
     d90:	29 81       	ldd	r18, Y+1	; 0x01
     d92:	20 95       	com	r18
     d94:	23 23       	and	r18, r19
     d96:	fc 01       	movw	r30, r24
     d98:	20 83       	st	Z, r18
		break;
     d9a:	22 c0       	rjmp	.+68     	; 0xde0 <PORTA_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRA |= mask;
     d9c:	81 e2       	ldi	r24, 0x21	; 33
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	21 e2       	ldi	r18, 0x21	; 33
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	f9 01       	movw	r30, r18
     da6:	30 81       	ld	r19, Z
     da8:	29 81       	ldd	r18, Y+1	; 0x01
     daa:	23 2b       	or	r18, r19
     dac:	fc 01       	movw	r30, r24
     dae:	20 83       	st	Z, r18
		break;
     db0:	17 c0       	rjmp	.+46     	; 0xde0 <PORTA_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRA &= ~mask;
     db2:	81 e2       	ldi	r24, 0x21	; 33
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	21 e2       	ldi	r18, 0x21	; 33
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	32 2f       	mov	r19, r18
     dc0:	29 81       	ldd	r18, Y+1	; 0x01
     dc2:	20 95       	com	r18
     dc4:	23 23       	and	r18, r19
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18

		PORTA |= mask;
     dca:	82 e2       	ldi	r24, 0x22	; 34
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	22 e2       	ldi	r18, 0x22	; 34
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	f9 01       	movw	r30, r18
     dd4:	30 81       	ld	r19, Z
     dd6:	29 81       	ldd	r18, Y+1	; 0x01
     dd8:	23 2b       	or	r18, r19
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
		break;
     dde:	00 00       	nop
	default:
		break;
	}
}
     de0:	00 00       	nop
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	1f 92       	push	r1
     df2:	1f 92       	push	r1
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	88 2f       	mov	r24, r24
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	91 05       	cpc	r25, r1
     e06:	e1 f0       	breq	.+56     	; 0xe40 <PORTA_set_pin_dir+0x54>
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	91 05       	cpc	r25, r1
     e0c:	71 f1       	breq	.+92     	; 0xe6a <PORTA_set_pin_dir+0x7e>
     e0e:	89 2b       	or	r24, r25
     e10:	09 f0       	breq	.+2      	; 0xe14 <PORTA_set_pin_dir+0x28>
		DDRA |= ~(1 << pin);

		PORTA |= 1 << pin;
		break;
	default:
		break;
     e12:	55 c0       	rjmp	.+170    	; 0xebe <PORTA_set_pin_dir+0xd2>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRA &= ~(1 << pin);
     e14:	81 e2       	ldi	r24, 0x21	; 33
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	21 e2       	ldi	r18, 0x21	; 33
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	f9 01       	movw	r30, r18
     e1e:	20 81       	ld	r18, Z
     e20:	62 2f       	mov	r22, r18
     e22:	29 81       	ldd	r18, Y+1	; 0x01
     e24:	42 2f       	mov	r20, r18
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <PORTA_set_pin_dir+0x46>
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	4a 95       	dec	r20
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <PORTA_set_pin_dir+0x42>
     e36:	20 95       	com	r18
     e38:	26 23       	and	r18, r22
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
		break;
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <PORTA_set_pin_dir+0xd2>
	case PORT_DIR_OUT:
		DDRA |= 1 << pin;
     e40:	81 e2       	ldi	r24, 0x21	; 33
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	21 e2       	ldi	r18, 0x21	; 33
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	62 2f       	mov	r22, r18
     e4e:	29 81       	ldd	r18, Y+1	; 0x01
     e50:	42 2f       	mov	r20, r18
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <PORTA_set_pin_dir+0x72>
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	4a 95       	dec	r20
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <PORTA_set_pin_dir+0x6e>
     e62:	26 2b       	or	r18, r22
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
		break;
     e68:	2a c0       	rjmp	.+84     	; 0xebe <PORTA_set_pin_dir+0xd2>
	case PORT_DIR_OFF:
		DDRA |= ~(1 << pin);
     e6a:	81 e2       	ldi	r24, 0x21	; 33
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	21 e2       	ldi	r18, 0x21	; 33
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	f9 01       	movw	r30, r18
     e74:	20 81       	ld	r18, Z
     e76:	62 2f       	mov	r22, r18
     e78:	29 81       	ldd	r18, Y+1	; 0x01
     e7a:	42 2f       	mov	r20, r18
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	21 e0       	ldi	r18, 0x01	; 1
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <PORTA_set_pin_dir+0x9c>
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	4a 95       	dec	r20
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <PORTA_set_pin_dir+0x98>
     e8c:	20 95       	com	r18
     e8e:	26 2b       	or	r18, r22
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18

		PORTA |= 1 << pin;
     e94:	82 e2       	ldi	r24, 0x22	; 34
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	22 e2       	ldi	r18, 0x22	; 34
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	f9 01       	movw	r30, r18
     e9e:	20 81       	ld	r18, Z
     ea0:	62 2f       	mov	r22, r18
     ea2:	29 81       	ldd	r18, Y+1	; 0x01
     ea4:	42 2f       	mov	r20, r18
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <PORTA_set_pin_dir+0xc6>
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	4a 95       	dec	r20
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <PORTA_set_pin_dir+0xc2>
     eb6:	26 2b       	or	r18, r22
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
		break;
     ebc:	00 00       	nop
	default:
		break;
	}
}
     ebe:	00 00       	nop
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	08 95       	ret

00000eca <PORTA_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	1f 92       	push	r1
     ed0:	1f 92       	push	r1
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	88 23       	and	r24, r24
     ede:	a9 f0       	breq	.+42     	; 0xf0a <PORTA_set_pin_level+0x40>
		PORTA |= 1 << pin;
     ee0:	82 e2       	ldi	r24, 0x22	; 34
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	22 e2       	ldi	r18, 0x22	; 34
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	f9 01       	movw	r30, r18
     eea:	20 81       	ld	r18, Z
     eec:	62 2f       	mov	r22, r18
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	42 2f       	mov	r20, r18
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	21 e0       	ldi	r18, 0x01	; 1
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <PORTA_set_pin_level+0x34>
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	4a 95       	dec	r20
     f00:	e2 f7       	brpl	.-8      	; 0xefa <PORTA_set_pin_level+0x30>
     f02:	26 2b       	or	r18, r22
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
	} else {
		PORTA &= ~(1 << pin);
	}
}
     f08:	15 c0       	rjmp	.+42     	; 0xf34 <PORTA_set_pin_level+0x6a>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTA |= 1 << pin;
	} else {
		PORTA &= ~(1 << pin);
     f0a:	82 e2       	ldi	r24, 0x22	; 34
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	22 e2       	ldi	r18, 0x22	; 34
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	62 2f       	mov	r22, r18
     f18:	29 81       	ldd	r18, Y+1	; 0x01
     f1a:	42 2f       	mov	r20, r18
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <PORTA_set_pin_level+0x5e>
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	4a 95       	dec	r20
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <PORTA_set_pin_level+0x5a>
     f2c:	20 95       	com	r18
     f2e:	26 23       	and	r18, r22
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
	}
}
     f34:	00 00       	nop
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number in PORTB
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	1f 92       	push	r1
     f46:	1f 92       	push	r1
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	6a 83       	std	Y+2, r22	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	51 f5       	brne	.+84     	; 0xfaa <PORTB_set_pin_pull_mode+0x6a>

		DDRB &= ~(1 << pin);
     f56:	84 e2       	ldi	r24, 0x24	; 36
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	24 e2       	ldi	r18, 0x24	; 36
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	62 2f       	mov	r22, r18
     f64:	29 81       	ldd	r18, Y+1	; 0x01
     f66:	42 2f       	mov	r20, r18
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <PORTB_set_pin_pull_mode+0x34>
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	4a 95       	dec	r20
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <PORTB_set_pin_pull_mode+0x30>
     f78:	20 95       	com	r18
     f7a:	26 23       	and	r18, r22
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 83       	st	Z, r18

		PORTB |= 1 << pin;
     f80:	85 e2       	ldi	r24, 0x25	; 37
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	25 e2       	ldi	r18, 0x25	; 37
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	f9 01       	movw	r30, r18
     f8a:	20 81       	ld	r18, Z
     f8c:	62 2f       	mov	r22, r18
     f8e:	29 81       	ldd	r18, Y+1	; 0x01
     f90:	42 2f       	mov	r20, r18
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	21 e0       	ldi	r18, 0x01	; 1
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <PORTB_set_pin_pull_mode+0x5e>
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	4a 95       	dec	r20
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <PORTB_set_pin_pull_mode+0x5a>
     fa2:	26 2b       	or	r18, r22
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
	}
}
     fa8:	18 c0       	rjmp	.+48     	; 0xfda <PORTB_set_pin_pull_mode+0x9a>
	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	88 23       	and	r24, r24
     fae:	a9 f4       	brne	.+42     	; 0xfda <PORTB_set_pin_pull_mode+0x9a>

		PORTB &= ~(1 << pin);
     fb0:	85 e2       	ldi	r24, 0x25	; 37
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	25 e2       	ldi	r18, 0x25	; 37
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	62 2f       	mov	r22, r18
     fbe:	29 81       	ldd	r18, Y+1	; 0x01
     fc0:	42 2f       	mov	r20, r18
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <PORTB_set_pin_pull_mode+0x8e>
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	4a 95       	dec	r20
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <PORTB_set_pin_pull_mode+0x8a>
     fd2:	20 95       	com	r18
     fd4:	26 23       	and	r18, r22
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
	}
}
     fda:	00 00       	nop
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	1f 92       	push	r1
     fec:	1f 92       	push	r1
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	99 f0       	breq	.+38     	; 0x1028 <PORTB_set_port_dir+0x42>
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	91 05       	cpc	r25, r1
    1006:	d9 f0       	breq	.+54     	; 0x103e <PORTB_set_port_dir+0x58>
    1008:	89 2b       	or	r24, r25
    100a:	09 f0       	breq	.+2      	; 0x100e <PORTB_set_port_dir+0x28>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
    100c:	2f c0       	rjmp	.+94     	; 0x106c <PORTB_set_port_dir+0x86>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
    100e:	84 e2       	ldi	r24, 0x24	; 36
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	24 e2       	ldi	r18, 0x24	; 36
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	32 2f       	mov	r19, r18
    101c:	29 81       	ldd	r18, Y+1	; 0x01
    101e:	20 95       	com	r18
    1020:	23 23       	and	r18, r19
    1022:	fc 01       	movw	r30, r24
    1024:	20 83       	st	Z, r18
		break;
    1026:	22 c0       	rjmp	.+68     	; 0x106c <PORTB_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRB |= mask;
    1028:	84 e2       	ldi	r24, 0x24	; 36
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	24 e2       	ldi	r18, 0x24	; 36
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	f9 01       	movw	r30, r18
    1032:	30 81       	ld	r19, Z
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	23 2b       	or	r18, r19
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18
		break;
    103c:	17 c0       	rjmp	.+46     	; 0x106c <PORTB_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
    103e:	84 e2       	ldi	r24, 0x24	; 36
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	24 e2       	ldi	r18, 0x24	; 36
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	20 81       	ld	r18, Z
    104a:	32 2f       	mov	r19, r18
    104c:	29 81       	ldd	r18, Y+1	; 0x01
    104e:	20 95       	com	r18
    1050:	23 23       	and	r18, r19
    1052:	fc 01       	movw	r30, r24
    1054:	20 83       	st	Z, r18

		PORTB |= mask;
    1056:	85 e2       	ldi	r24, 0x25	; 37
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	25 e2       	ldi	r18, 0x25	; 37
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	f9 01       	movw	r30, r18
    1060:	30 81       	ld	r19, Z
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	23 2b       	or	r18, r19
    1066:	fc 01       	movw	r30, r24
    1068:	20 83       	st	Z, r18
		break;
    106a:	00 00       	nop
	default:
		break;
	}
}
    106c:	00 00       	nop
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	1f 92       	push	r1
    107e:	1f 92       	push	r1
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	91 05       	cpc	r25, r1
    1092:	e1 f0       	breq	.+56     	; 0x10cc <PORTB_set_pin_dir+0x54>
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	91 05       	cpc	r25, r1
    1098:	71 f1       	breq	.+92     	; 0x10f6 <PORTB_set_pin_dir+0x7e>
    109a:	89 2b       	or	r24, r25
    109c:	09 f0       	breq	.+2      	; 0x10a0 <PORTB_set_pin_dir+0x28>
		DDRB |= ~(1 << pin);

		PORTB |= 1 << pin;
		break;
	default:
		break;
    109e:	55 c0       	rjmp	.+170    	; 0x114a <PORTB_set_pin_dir+0xd2>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
    10a0:	84 e2       	ldi	r24, 0x24	; 36
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	24 e2       	ldi	r18, 0x24	; 36
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	f9 01       	movw	r30, r18
    10aa:	20 81       	ld	r18, Z
    10ac:	62 2f       	mov	r22, r18
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	42 2f       	mov	r20, r18
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	21 e0       	ldi	r18, 0x01	; 1
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <PORTB_set_pin_dir+0x46>
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	4a 95       	dec	r20
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <PORTB_set_pin_dir+0x42>
    10c2:	20 95       	com	r18
    10c4:	26 23       	and	r18, r22
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
		break;
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <PORTB_set_pin_dir+0xd2>
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
    10cc:	84 e2       	ldi	r24, 0x24	; 36
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	24 e2       	ldi	r18, 0x24	; 36
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	62 2f       	mov	r22, r18
    10da:	29 81       	ldd	r18, Y+1	; 0x01
    10dc:	42 2f       	mov	r20, r18
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <PORTB_set_pin_dir+0x72>
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	4a 95       	dec	r20
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <PORTB_set_pin_dir+0x6e>
    10ee:	26 2b       	or	r18, r22
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
		break;
    10f4:	2a c0       	rjmp	.+84     	; 0x114a <PORTB_set_pin_dir+0xd2>
	case PORT_DIR_OFF:
		DDRB |= ~(1 << pin);
    10f6:	84 e2       	ldi	r24, 0x24	; 36
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	24 e2       	ldi	r18, 0x24	; 36
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	f9 01       	movw	r30, r18
    1100:	20 81       	ld	r18, Z
    1102:	62 2f       	mov	r22, r18
    1104:	29 81       	ldd	r18, Y+1	; 0x01
    1106:	42 2f       	mov	r20, r18
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	21 e0       	ldi	r18, 0x01	; 1
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <PORTB_set_pin_dir+0x9c>
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	4a 95       	dec	r20
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <PORTB_set_pin_dir+0x98>
    1118:	20 95       	com	r18
    111a:	26 2b       	or	r18, r22
    111c:	fc 01       	movw	r30, r24
    111e:	20 83       	st	Z, r18

		PORTB |= 1 << pin;
    1120:	85 e2       	ldi	r24, 0x25	; 37
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	25 e2       	ldi	r18, 0x25	; 37
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	f9 01       	movw	r30, r18
    112a:	20 81       	ld	r18, Z
    112c:	62 2f       	mov	r22, r18
    112e:	29 81       	ldd	r18, Y+1	; 0x01
    1130:	42 2f       	mov	r20, r18
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	21 e0       	ldi	r18, 0x01	; 1
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <PORTB_set_pin_dir+0xc6>
    113a:	22 0f       	add	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	4a 95       	dec	r20
    1140:	e2 f7       	brpl	.-8      	; 0x113a <PORTB_set_pin_dir+0xc2>
    1142:	26 2b       	or	r18, r22
    1144:	fc 01       	movw	r30, r24
    1146:	20 83       	st	Z, r18
		break;
    1148:	00 00       	nop
	default:
		break;
	}
}
    114a:	00 00       	nop
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	1f 92       	push	r1
    115c:	1f 92       	push	r1
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	99 f0       	breq	.+38     	; 0x1198 <PORTC_set_port_dir+0x42>
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	d9 f0       	breq	.+54     	; 0x11ae <PORTC_set_port_dir+0x58>
    1178:	89 2b       	or	r24, r25
    117a:	09 f0       	breq	.+2      	; 0x117e <PORTC_set_port_dir+0x28>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
    117c:	2f c0       	rjmp	.+94     	; 0x11dc <PORTC_set_port_dir+0x86>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
    117e:	87 e2       	ldi	r24, 0x27	; 39
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	27 e2       	ldi	r18, 0x27	; 39
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	f9 01       	movw	r30, r18
    1188:	20 81       	ld	r18, Z
    118a:	32 2f       	mov	r19, r18
    118c:	29 81       	ldd	r18, Y+1	; 0x01
    118e:	20 95       	com	r18
    1190:	23 23       	and	r18, r19
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
		break;
    1196:	22 c0       	rjmp	.+68     	; 0x11dc <PORTC_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRC |= mask;
    1198:	87 e2       	ldi	r24, 0x27	; 39
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	27 e2       	ldi	r18, 0x27	; 39
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	30 81       	ld	r19, Z
    11a4:	29 81       	ldd	r18, Y+1	; 0x01
    11a6:	23 2b       	or	r18, r19
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
		break;
    11ac:	17 c0       	rjmp	.+46     	; 0x11dc <PORTC_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
    11ae:	87 e2       	ldi	r24, 0x27	; 39
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	27 e2       	ldi	r18, 0x27	; 39
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	32 2f       	mov	r19, r18
    11bc:	29 81       	ldd	r18, Y+1	; 0x01
    11be:	20 95       	com	r18
    11c0:	23 23       	and	r18, r19
    11c2:	fc 01       	movw	r30, r24
    11c4:	20 83       	st	Z, r18

		PORTC |= mask;
    11c6:	88 e2       	ldi	r24, 0x28	; 40
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	28 e2       	ldi	r18, 0x28	; 40
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	f9 01       	movw	r30, r18
    11d0:	30 81       	ld	r19, Z
    11d2:	29 81       	ldd	r18, Y+1	; 0x01
    11d4:	23 2b       	or	r18, r19
    11d6:	fc 01       	movw	r30, r24
    11d8:	20 83       	st	Z, r18
		break;
    11da:	00 00       	nop
	default:
		break;
	}
}
    11dc:	00 00       	nop
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	1f 92       	push	r1
    11ee:	1f 92       	push	r1
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	99 f0       	breq	.+38     	; 0x122a <PORTD_set_port_dir+0x42>
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	91 05       	cpc	r25, r1
    1208:	d9 f0       	breq	.+54     	; 0x1240 <PORTD_set_port_dir+0x58>
    120a:	89 2b       	or	r24, r25
    120c:	09 f0       	breq	.+2      	; 0x1210 <PORTD_set_port_dir+0x28>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
    120e:	2f c0       	rjmp	.+94     	; 0x126e <PORTD_set_port_dir+0x86>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
    1210:	8a e2       	ldi	r24, 0x2A	; 42
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	2a e2       	ldi	r18, 0x2A	; 42
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	f9 01       	movw	r30, r18
    121a:	20 81       	ld	r18, Z
    121c:	32 2f       	mov	r19, r18
    121e:	29 81       	ldd	r18, Y+1	; 0x01
    1220:	20 95       	com	r18
    1222:	23 23       	and	r18, r19
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
		break;
    1228:	22 c0       	rjmp	.+68     	; 0x126e <PORTD_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRD |= mask;
    122a:	8a e2       	ldi	r24, 0x2A	; 42
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	2a e2       	ldi	r18, 0x2A	; 42
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	f9 01       	movw	r30, r18
    1234:	30 81       	ld	r19, Z
    1236:	29 81       	ldd	r18, Y+1	; 0x01
    1238:	23 2b       	or	r18, r19
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18
		break;
    123e:	17 c0       	rjmp	.+46     	; 0x126e <PORTD_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
    1240:	8a e2       	ldi	r24, 0x2A	; 42
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	2a e2       	ldi	r18, 0x2A	; 42
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	32 2f       	mov	r19, r18
    124e:	29 81       	ldd	r18, Y+1	; 0x01
    1250:	20 95       	com	r18
    1252:	23 23       	and	r18, r19
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18

		PORTD |= mask;
    1258:	8b e2       	ldi	r24, 0x2B	; 43
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	2b e2       	ldi	r18, 0x2B	; 43
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	f9 01       	movw	r30, r18
    1262:	30 81       	ld	r19, Z
    1264:	29 81       	ldd	r18, Y+1	; 0x01
    1266:	23 2b       	or	r18, r19
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
		break;
    126c:	00 00       	nop
	default:
		break;
	}
}
    126e:	00 00       	nop
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <PORTE_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	1f 92       	push	r1
    1280:	1f 92       	push	r1
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	99 f0       	breq	.+38     	; 0x12bc <PORTE_set_port_dir+0x42>
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	91 05       	cpc	r25, r1
    129a:	d9 f0       	breq	.+54     	; 0x12d2 <PORTE_set_port_dir+0x58>
    129c:	89 2b       	or	r24, r25
    129e:	09 f0       	breq	.+2      	; 0x12a2 <PORTE_set_port_dir+0x28>
		DDRE &= ~mask;

		PORTE |= mask;
		break;
	default:
		break;
    12a0:	2f c0       	rjmp	.+94     	; 0x1300 <PORTE_set_port_dir+0x86>
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~mask;
    12a2:	8d e2       	ldi	r24, 0x2D	; 45
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	2d e2       	ldi	r18, 0x2D	; 45
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	32 2f       	mov	r19, r18
    12b0:	29 81       	ldd	r18, Y+1	; 0x01
    12b2:	20 95       	com	r18
    12b4:	23 23       	and	r18, r19
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
		break;
    12ba:	22 c0       	rjmp	.+68     	; 0x1300 <PORTE_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRE |= mask;
    12bc:	8d e2       	ldi	r24, 0x2D	; 45
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	2d e2       	ldi	r18, 0x2D	; 45
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	f9 01       	movw	r30, r18
    12c6:	30 81       	ld	r19, Z
    12c8:	29 81       	ldd	r18, Y+1	; 0x01
    12ca:	23 2b       	or	r18, r19
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18
		break;
    12d0:	17 c0       	rjmp	.+46     	; 0x1300 <PORTE_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRE &= ~mask;
    12d2:	8d e2       	ldi	r24, 0x2D	; 45
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	2d e2       	ldi	r18, 0x2D	; 45
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	f9 01       	movw	r30, r18
    12dc:	20 81       	ld	r18, Z
    12de:	32 2f       	mov	r19, r18
    12e0:	29 81       	ldd	r18, Y+1	; 0x01
    12e2:	20 95       	com	r18
    12e4:	23 23       	and	r18, r19
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18

		PORTE |= mask;
    12ea:	8e e2       	ldi	r24, 0x2E	; 46
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	2e e2       	ldi	r18, 0x2E	; 46
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	f9 01       	movw	r30, r18
    12f4:	30 81       	ld	r19, Z
    12f6:	29 81       	ldd	r18, Y+1	; 0x01
    12f8:	23 2b       	or	r18, r19
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
		break;
    12fe:	00 00       	nop
	default:
		break;
	}
}
    1300:	00 00       	nop
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <PORTF_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTF_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	1f 92       	push	r1
    1312:	1f 92       	push	r1
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	99 f0       	breq	.+38     	; 0x134e <PORTF_set_port_dir+0x42>
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	91 05       	cpc	r25, r1
    132c:	d9 f0       	breq	.+54     	; 0x1364 <PORTF_set_port_dir+0x58>
    132e:	89 2b       	or	r24, r25
    1330:	09 f0       	breq	.+2      	; 0x1334 <PORTF_set_port_dir+0x28>
		DDRF &= ~mask;

		PORTF |= mask;
		break;
	default:
		break;
    1332:	2f c0       	rjmp	.+94     	; 0x1392 <PORTF_set_port_dir+0x86>
 */
static inline void PORTF_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRF &= ~mask;
    1334:	80 e3       	ldi	r24, 0x30	; 48
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	20 e3       	ldi	r18, 0x30	; 48
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	f9 01       	movw	r30, r18
    133e:	20 81       	ld	r18, Z
    1340:	32 2f       	mov	r19, r18
    1342:	29 81       	ldd	r18, Y+1	; 0x01
    1344:	20 95       	com	r18
    1346:	23 23       	and	r18, r19
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18
		break;
    134c:	22 c0       	rjmp	.+68     	; 0x1392 <PORTF_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRF |= mask;
    134e:	80 e3       	ldi	r24, 0x30	; 48
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	20 e3       	ldi	r18, 0x30	; 48
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	f9 01       	movw	r30, r18
    1358:	30 81       	ld	r19, Z
    135a:	29 81       	ldd	r18, Y+1	; 0x01
    135c:	23 2b       	or	r18, r19
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
		break;
    1362:	17 c0       	rjmp	.+46     	; 0x1392 <PORTF_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRF &= ~mask;
    1364:	80 e3       	ldi	r24, 0x30	; 48
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	20 e3       	ldi	r18, 0x30	; 48
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	f9 01       	movw	r30, r18
    136e:	20 81       	ld	r18, Z
    1370:	32 2f       	mov	r19, r18
    1372:	29 81       	ldd	r18, Y+1	; 0x01
    1374:	20 95       	com	r18
    1376:	23 23       	and	r18, r19
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18

		PORTF |= mask;
    137c:	81 e3       	ldi	r24, 0x31	; 49
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	21 e3       	ldi	r18, 0x31	; 49
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	30 81       	ld	r19, Z
    1388:	29 81       	ldd	r18, Y+1	; 0x01
    138a:	23 2b       	or	r18, r19
    138c:	fc 01       	movw	r30, r24
    138e:	20 83       	st	Z, r18
		break;
    1390:	00 00       	nop
	default:
		break;
	}
}
    1392:	00 00       	nop
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <PORTG_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTG_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	1f 92       	push	r1
    13a4:	1f 92       	push	r1
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	99 f0       	breq	.+38     	; 0x13e0 <PORTG_set_port_dir+0x42>
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	d9 f0       	breq	.+54     	; 0x13f6 <PORTG_set_port_dir+0x58>
    13c0:	89 2b       	or	r24, r25
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <PORTG_set_port_dir+0x28>
		DDRG &= ~mask;

		PORTG |= mask;
		break;
	default:
		break;
    13c4:	2f c0       	rjmp	.+94     	; 0x1424 <PORTG_set_port_dir+0x86>
 */
static inline void PORTG_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRG &= ~mask;
    13c6:	83 e3       	ldi	r24, 0x33	; 51
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	23 e3       	ldi	r18, 0x33	; 51
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	f9 01       	movw	r30, r18
    13d0:	20 81       	ld	r18, Z
    13d2:	32 2f       	mov	r19, r18
    13d4:	29 81       	ldd	r18, Y+1	; 0x01
    13d6:	20 95       	com	r18
    13d8:	23 23       	and	r18, r19
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
		break;
    13de:	22 c0       	rjmp	.+68     	; 0x1424 <PORTG_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRG |= mask;
    13e0:	83 e3       	ldi	r24, 0x33	; 51
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	23 e3       	ldi	r18, 0x33	; 51
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	f9 01       	movw	r30, r18
    13ea:	30 81       	ld	r19, Z
    13ec:	29 81       	ldd	r18, Y+1	; 0x01
    13ee:	23 2b       	or	r18, r19
    13f0:	fc 01       	movw	r30, r24
    13f2:	20 83       	st	Z, r18
		break;
    13f4:	17 c0       	rjmp	.+46     	; 0x1424 <PORTG_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRG &= ~mask;
    13f6:	83 e3       	ldi	r24, 0x33	; 51
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	23 e3       	ldi	r18, 0x33	; 51
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	f9 01       	movw	r30, r18
    1400:	20 81       	ld	r18, Z
    1402:	32 2f       	mov	r19, r18
    1404:	29 81       	ldd	r18, Y+1	; 0x01
    1406:	20 95       	com	r18
    1408:	23 23       	and	r18, r19
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18

		PORTG |= mask;
    140e:	84 e3       	ldi	r24, 0x34	; 52
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	24 e3       	ldi	r18, 0x34	; 52
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	f9 01       	movw	r30, r18
    1418:	30 81       	ld	r19, Z
    141a:	29 81       	ldd	r18, Y+1	; 0x01
    141c:	23 2b       	or	r18, r19
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18
		break;
    1422:	00 00       	nop
	default:
		break;
	}
}
    1424:	00 00       	nop
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <PORTH_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTH_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	1f 92       	push	r1
    1436:	1f 92       	push	r1
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	99 f0       	breq	.+38     	; 0x1472 <PORTH_set_port_dir+0x42>
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	91 05       	cpc	r25, r1
    1450:	d9 f0       	breq	.+54     	; 0x1488 <PORTH_set_port_dir+0x58>
    1452:	89 2b       	or	r24, r25
    1454:	09 f0       	breq	.+2      	; 0x1458 <PORTH_set_port_dir+0x28>
		DDRH &= ~mask;

		PORTH |= mask;
		break;
	default:
		break;
    1456:	2f c0       	rjmp	.+94     	; 0x14b6 <PORTH_set_port_dir+0x86>
 */
static inline void PORTH_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~mask;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	31 e0       	ldi	r19, 0x01	; 1
    1460:	f9 01       	movw	r30, r18
    1462:	20 81       	ld	r18, Z
    1464:	32 2f       	mov	r19, r18
    1466:	29 81       	ldd	r18, Y+1	; 0x01
    1468:	20 95       	com	r18
    146a:	23 23       	and	r18, r19
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
		break;
    1470:	22 c0       	rjmp	.+68     	; 0x14b6 <PORTH_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRH |= mask;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	21 e0       	ldi	r18, 0x01	; 1
    1478:	31 e0       	ldi	r19, 0x01	; 1
    147a:	f9 01       	movw	r30, r18
    147c:	30 81       	ld	r19, Z
    147e:	29 81       	ldd	r18, Y+1	; 0x01
    1480:	23 2b       	or	r18, r19
    1482:	fc 01       	movw	r30, r24
    1484:	20 83       	st	Z, r18
		break;
    1486:	17 c0       	rjmp	.+46     	; 0x14b6 <PORTH_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRH &= ~mask;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	21 e0       	ldi	r18, 0x01	; 1
    148e:	31 e0       	ldi	r19, 0x01	; 1
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	32 2f       	mov	r19, r18
    1496:	29 81       	ldd	r18, Y+1	; 0x01
    1498:	20 95       	com	r18
    149a:	23 23       	and	r18, r19
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18

		PORTH |= mask;
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	22 e0       	ldi	r18, 0x02	; 2
    14a6:	31 e0       	ldi	r19, 0x01	; 1
    14a8:	f9 01       	movw	r30, r18
    14aa:	30 81       	ld	r19, Z
    14ac:	29 81       	ldd	r18, Y+1	; 0x01
    14ae:	23 2b       	or	r18, r19
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
		break;
    14b4:	00 00       	nop
	default:
		break;
	}
}
    14b6:	00 00       	nop
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <PORTH_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	1f 92       	push	r1
    14c8:	1f 92       	push	r1
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	e1 f0       	breq	.+56     	; 0x1516 <PORTH_set_pin_dir+0x54>
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	91 05       	cpc	r25, r1
    14e2:	71 f1       	breq	.+92     	; 0x1540 <PORTH_set_pin_dir+0x7e>
    14e4:	89 2b       	or	r24, r25
    14e6:	09 f0       	breq	.+2      	; 0x14ea <PORTH_set_pin_dir+0x28>
		DDRH |= ~(1 << pin);

		PORTH |= 1 << pin;
		break;
	default:
		break;
    14e8:	55 c0       	rjmp	.+170    	; 0x1594 <PORTH_set_pin_dir+0xd2>
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    14f0:	31 e0       	ldi	r19, 0x01	; 1
    14f2:	f9 01       	movw	r30, r18
    14f4:	20 81       	ld	r18, Z
    14f6:	62 2f       	mov	r22, r18
    14f8:	29 81       	ldd	r18, Y+1	; 0x01
    14fa:	42 2f       	mov	r20, r18
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	21 e0       	ldi	r18, 0x01	; 1
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <PORTH_set_pin_dir+0x46>
    1504:	22 0f       	add	r18, r18
    1506:	33 1f       	adc	r19, r19
    1508:	4a 95       	dec	r20
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <PORTH_set_pin_dir+0x42>
    150c:	20 95       	com	r18
    150e:	26 23       	and	r18, r22
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
		break;
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <PORTH_set_pin_dir+0xd2>
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	21 e0       	ldi	r18, 0x01	; 1
    151c:	31 e0       	ldi	r19, 0x01	; 1
    151e:	f9 01       	movw	r30, r18
    1520:	20 81       	ld	r18, Z
    1522:	62 2f       	mov	r22, r18
    1524:	29 81       	ldd	r18, Y+1	; 0x01
    1526:	42 2f       	mov	r20, r18
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <PORTH_set_pin_dir+0x72>
    1530:	22 0f       	add	r18, r18
    1532:	33 1f       	adc	r19, r19
    1534:	4a 95       	dec	r20
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <PORTH_set_pin_dir+0x6e>
    1538:	26 2b       	or	r18, r22
    153a:	fc 01       	movw	r30, r24
    153c:	20 83       	st	Z, r18
		break;
    153e:	2a c0       	rjmp	.+84     	; 0x1594 <PORTH_set_pin_dir+0xd2>
	case PORT_DIR_OFF:
		DDRH |= ~(1 << pin);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	31 e0       	ldi	r19, 0x01	; 1
    1548:	f9 01       	movw	r30, r18
    154a:	20 81       	ld	r18, Z
    154c:	62 2f       	mov	r22, r18
    154e:	29 81       	ldd	r18, Y+1	; 0x01
    1550:	42 2f       	mov	r20, r18
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <PORTH_set_pin_dir+0x9c>
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	4a 95       	dec	r20
    1560:	e2 f7       	brpl	.-8      	; 0x155a <PORTH_set_pin_dir+0x98>
    1562:	20 95       	com	r18
    1564:	26 2b       	or	r18, r22
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18

		PORTH |= 1 << pin;
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	22 e0       	ldi	r18, 0x02	; 2
    1570:	31 e0       	ldi	r19, 0x01	; 1
    1572:	f9 01       	movw	r30, r18
    1574:	20 81       	ld	r18, Z
    1576:	62 2f       	mov	r22, r18
    1578:	29 81       	ldd	r18, Y+1	; 0x01
    157a:	42 2f       	mov	r20, r18
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <PORTH_set_pin_dir+0xc6>
    1584:	22 0f       	add	r18, r18
    1586:	33 1f       	adc	r19, r19
    1588:	4a 95       	dec	r20
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <PORTH_set_pin_dir+0xc2>
    158c:	26 2b       	or	r18, r22
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
		break;
    1592:	00 00       	nop
	default:
		break;
	}
}
    1594:	00 00       	nop
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <PORTH_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	1f 92       	push	r1
    15a6:	1f 92       	push	r1
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	6a 83       	std	Y+2, r22	; 0x02
	if (level) {
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 23       	and	r24, r24
    15b4:	a9 f0       	breq	.+42     	; 0x15e0 <PORTH_set_pin_level+0x40>
		PORTH |= 1 << pin;
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	22 e0       	ldi	r18, 0x02	; 2
    15bc:	31 e0       	ldi	r19, 0x01	; 1
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	62 2f       	mov	r22, r18
    15c4:	29 81       	ldd	r18, Y+1	; 0x01
    15c6:	42 2f       	mov	r20, r18
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	21 e0       	ldi	r18, 0x01	; 1
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <PORTH_set_pin_level+0x34>
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	4a 95       	dec	r20
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <PORTH_set_pin_level+0x30>
    15d8:	26 2b       	or	r18, r22
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18
	} else {
		PORTH &= ~(1 << pin);
	}
}
    15de:	15 c0       	rjmp	.+42     	; 0x160a <PORTH_set_pin_level+0x6a>
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	22 e0       	ldi	r18, 0x02	; 2
    15e6:	31 e0       	ldi	r19, 0x01	; 1
    15e8:	f9 01       	movw	r30, r18
    15ea:	20 81       	ld	r18, Z
    15ec:	62 2f       	mov	r22, r18
    15ee:	29 81       	ldd	r18, Y+1	; 0x01
    15f0:	42 2f       	mov	r20, r18
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <PORTH_set_pin_level+0x5e>
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	4a 95       	dec	r20
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <PORTH_set_pin_level+0x5a>
    1602:	20 95       	com	r18
    1604:	26 23       	and	r18, r22
    1606:	fc 01       	movw	r30, r24
    1608:	20 83       	st	Z, r18
	}
}
    160a:	00 00       	nop
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <PORTJ_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTJ_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	1f 92       	push	r1
    161c:	1f 92       	push	r1
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	91 05       	cpc	r25, r1
    1630:	99 f0       	breq	.+38     	; 0x1658 <PORTJ_set_port_dir+0x42>
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	91 05       	cpc	r25, r1
    1636:	d9 f0       	breq	.+54     	; 0x166e <PORTJ_set_port_dir+0x58>
    1638:	89 2b       	or	r24, r25
    163a:	09 f0       	breq	.+2      	; 0x163e <PORTJ_set_port_dir+0x28>
		DDRJ &= ~mask;

		PORTJ |= mask;
		break;
	default:
		break;
    163c:	2f c0       	rjmp	.+94     	; 0x169c <PORTJ_set_port_dir+0x86>
 */
static inline void PORTJ_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~mask;
    163e:	84 e0       	ldi	r24, 0x04	; 4
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	24 e0       	ldi	r18, 0x04	; 4
    1644:	31 e0       	ldi	r19, 0x01	; 1
    1646:	f9 01       	movw	r30, r18
    1648:	20 81       	ld	r18, Z
    164a:	32 2f       	mov	r19, r18
    164c:	29 81       	ldd	r18, Y+1	; 0x01
    164e:	20 95       	com	r18
    1650:	23 23       	and	r18, r19
    1652:	fc 01       	movw	r30, r24
    1654:	20 83       	st	Z, r18
		break;
    1656:	22 c0       	rjmp	.+68     	; 0x169c <PORTJ_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRJ |= mask;
    1658:	84 e0       	ldi	r24, 0x04	; 4
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	24 e0       	ldi	r18, 0x04	; 4
    165e:	31 e0       	ldi	r19, 0x01	; 1
    1660:	f9 01       	movw	r30, r18
    1662:	30 81       	ld	r19, Z
    1664:	29 81       	ldd	r18, Y+1	; 0x01
    1666:	23 2b       	or	r18, r19
    1668:	fc 01       	movw	r30, r24
    166a:	20 83       	st	Z, r18
		break;
    166c:	17 c0       	rjmp	.+46     	; 0x169c <PORTJ_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRJ &= ~mask;
    166e:	84 e0       	ldi	r24, 0x04	; 4
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	24 e0       	ldi	r18, 0x04	; 4
    1674:	31 e0       	ldi	r19, 0x01	; 1
    1676:	f9 01       	movw	r30, r18
    1678:	20 81       	ld	r18, Z
    167a:	32 2f       	mov	r19, r18
    167c:	29 81       	ldd	r18, Y+1	; 0x01
    167e:	20 95       	com	r18
    1680:	23 23       	and	r18, r19
    1682:	fc 01       	movw	r30, r24
    1684:	20 83       	st	Z, r18

		PORTJ |= mask;
    1686:	85 e0       	ldi	r24, 0x05	; 5
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	25 e0       	ldi	r18, 0x05	; 5
    168c:	31 e0       	ldi	r19, 0x01	; 1
    168e:	f9 01       	movw	r30, r18
    1690:	30 81       	ld	r19, Z
    1692:	29 81       	ldd	r18, Y+1	; 0x01
    1694:	23 2b       	or	r18, r19
    1696:	fc 01       	movw	r30, r24
    1698:	20 83       	st	Z, r18
		break;
    169a:	00 00       	nop
	default:
		break;
	}
}
    169c:	00 00       	nop
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <PORTK_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number in PORTK
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTK_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	1f 92       	push	r1
    16ae:	1f 92       	push	r1
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	6a 83       	std	Y+2, r22	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	51 f5       	brne	.+84     	; 0x1712 <PORTK_set_pin_pull_mode+0x6a>

		DDRK &= ~(1 << pin);
    16be:	87 e0       	ldi	r24, 0x07	; 7
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	27 e0       	ldi	r18, 0x07	; 7
    16c4:	31 e0       	ldi	r19, 0x01	; 1
    16c6:	f9 01       	movw	r30, r18
    16c8:	20 81       	ld	r18, Z
    16ca:	62 2f       	mov	r22, r18
    16cc:	29 81       	ldd	r18, Y+1	; 0x01
    16ce:	42 2f       	mov	r20, r18
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	21 e0       	ldi	r18, 0x01	; 1
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <PORTK_set_pin_pull_mode+0x34>
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	4a 95       	dec	r20
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <PORTK_set_pin_pull_mode+0x30>
    16e0:	20 95       	com	r18
    16e2:	26 23       	and	r18, r22
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18

		PORTK |= 1 << pin;
    16e8:	88 e0       	ldi	r24, 0x08	; 8
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	28 e0       	ldi	r18, 0x08	; 8
    16ee:	31 e0       	ldi	r19, 0x01	; 1
    16f0:	f9 01       	movw	r30, r18
    16f2:	20 81       	ld	r18, Z
    16f4:	62 2f       	mov	r22, r18
    16f6:	29 81       	ldd	r18, Y+1	; 0x01
    16f8:	42 2f       	mov	r20, r18
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <PORTK_set_pin_pull_mode+0x5e>
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	4a 95       	dec	r20
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <PORTK_set_pin_pull_mode+0x5a>
    170a:	26 2b       	or	r18, r22
    170c:	fc 01       	movw	r30, r24
    170e:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTK &= ~(1 << pin);
	}
}
    1710:	18 c0       	rjmp	.+48     	; 0x1742 <PORTK_set_pin_pull_mode+0x9a>
	if (pull_mode == PORT_PULL_UP) {

		DDRK &= ~(1 << pin);

		PORTK |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	88 23       	and	r24, r24
    1716:	a9 f4       	brne	.+42     	; 0x1742 <PORTK_set_pin_pull_mode+0x9a>

		PORTK &= ~(1 << pin);
    1718:	88 e0       	ldi	r24, 0x08	; 8
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	28 e0       	ldi	r18, 0x08	; 8
    171e:	31 e0       	ldi	r19, 0x01	; 1
    1720:	f9 01       	movw	r30, r18
    1722:	20 81       	ld	r18, Z
    1724:	62 2f       	mov	r22, r18
    1726:	29 81       	ldd	r18, Y+1	; 0x01
    1728:	42 2f       	mov	r20, r18
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <PORTK_set_pin_pull_mode+0x8e>
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	4a 95       	dec	r20
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <PORTK_set_pin_pull_mode+0x8a>
    173a:	20 95       	com	r18
    173c:	26 23       	and	r18, r22
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
	}
}
    1742:	00 00       	nop
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <PORTK_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTK_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	1f 92       	push	r1
    1754:	1f 92       	push	r1
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	99 f0       	breq	.+38     	; 0x1790 <PORTK_set_port_dir+0x42>
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	91 05       	cpc	r25, r1
    176e:	d9 f0       	breq	.+54     	; 0x17a6 <PORTK_set_port_dir+0x58>
    1770:	89 2b       	or	r24, r25
    1772:	09 f0       	breq	.+2      	; 0x1776 <PORTK_set_port_dir+0x28>
		DDRK &= ~mask;

		PORTK |= mask;
		break;
	default:
		break;
    1774:	2f c0       	rjmp	.+94     	; 0x17d4 <PORTK_set_port_dir+0x86>
 */
static inline void PORTK_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRK &= ~mask;
    1776:	87 e0       	ldi	r24, 0x07	; 7
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	27 e0       	ldi	r18, 0x07	; 7
    177c:	31 e0       	ldi	r19, 0x01	; 1
    177e:	f9 01       	movw	r30, r18
    1780:	20 81       	ld	r18, Z
    1782:	32 2f       	mov	r19, r18
    1784:	29 81       	ldd	r18, Y+1	; 0x01
    1786:	20 95       	com	r18
    1788:	23 23       	and	r18, r19
    178a:	fc 01       	movw	r30, r24
    178c:	20 83       	st	Z, r18
		break;
    178e:	22 c0       	rjmp	.+68     	; 0x17d4 <PORTK_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRK |= mask;
    1790:	87 e0       	ldi	r24, 0x07	; 7
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	27 e0       	ldi	r18, 0x07	; 7
    1796:	31 e0       	ldi	r19, 0x01	; 1
    1798:	f9 01       	movw	r30, r18
    179a:	30 81       	ld	r19, Z
    179c:	29 81       	ldd	r18, Y+1	; 0x01
    179e:	23 2b       	or	r18, r19
    17a0:	fc 01       	movw	r30, r24
    17a2:	20 83       	st	Z, r18
		break;
    17a4:	17 c0       	rjmp	.+46     	; 0x17d4 <PORTK_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRK &= ~mask;
    17a6:	87 e0       	ldi	r24, 0x07	; 7
    17a8:	91 e0       	ldi	r25, 0x01	; 1
    17aa:	27 e0       	ldi	r18, 0x07	; 7
    17ac:	31 e0       	ldi	r19, 0x01	; 1
    17ae:	f9 01       	movw	r30, r18
    17b0:	20 81       	ld	r18, Z
    17b2:	32 2f       	mov	r19, r18
    17b4:	29 81       	ldd	r18, Y+1	; 0x01
    17b6:	20 95       	com	r18
    17b8:	23 23       	and	r18, r19
    17ba:	fc 01       	movw	r30, r24
    17bc:	20 83       	st	Z, r18

		PORTK |= mask;
    17be:	88 e0       	ldi	r24, 0x08	; 8
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	28 e0       	ldi	r18, 0x08	; 8
    17c4:	31 e0       	ldi	r19, 0x01	; 1
    17c6:	f9 01       	movw	r30, r18
    17c8:	30 81       	ld	r19, Z
    17ca:	29 81       	ldd	r18, Y+1	; 0x01
    17cc:	23 2b       	or	r18, r19
    17ce:	fc 01       	movw	r30, r24
    17d0:	20 83       	st	Z, r18
		break;
    17d2:	00 00       	nop
	default:
		break;
	}
}
    17d4:	00 00       	nop
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <PORTL_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTL_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	1f 92       	push	r1
    17e6:	1f 92       	push	r1
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	91 05       	cpc	r25, r1
    17fa:	99 f0       	breq	.+38     	; 0x1822 <PORTL_set_port_dir+0x42>
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	91 05       	cpc	r25, r1
    1800:	d9 f0       	breq	.+54     	; 0x1838 <PORTL_set_port_dir+0x58>
    1802:	89 2b       	or	r24, r25
    1804:	09 f0       	breq	.+2      	; 0x1808 <PORTL_set_port_dir+0x28>
		DDRL &= ~mask;

		PORTL |= mask;
		break;
	default:
		break;
    1806:	2f c0       	rjmp	.+94     	; 0x1866 <PORTL_set_port_dir+0x86>
 */
static inline void PORTL_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRL &= ~mask;
    1808:	8a e0       	ldi	r24, 0x0A	; 10
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	31 e0       	ldi	r19, 0x01	; 1
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	32 2f       	mov	r19, r18
    1816:	29 81       	ldd	r18, Y+1	; 0x01
    1818:	20 95       	com	r18
    181a:	23 23       	and	r18, r19
    181c:	fc 01       	movw	r30, r24
    181e:	20 83       	st	Z, r18
		break;
    1820:	22 c0       	rjmp	.+68     	; 0x1866 <PORTL_set_port_dir+0x86>
	case PORT_DIR_OUT:
		DDRL |= mask;
    1822:	8a e0       	ldi	r24, 0x0A	; 10
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	2a e0       	ldi	r18, 0x0A	; 10
    1828:	31 e0       	ldi	r19, 0x01	; 1
    182a:	f9 01       	movw	r30, r18
    182c:	30 81       	ld	r19, Z
    182e:	29 81       	ldd	r18, Y+1	; 0x01
    1830:	23 2b       	or	r18, r19
    1832:	fc 01       	movw	r30, r24
    1834:	20 83       	st	Z, r18
		break;
    1836:	17 c0       	rjmp	.+46     	; 0x1866 <PORTL_set_port_dir+0x86>
	case PORT_DIR_OFF:
		DDRL &= ~mask;
    1838:	8a e0       	ldi	r24, 0x0A	; 10
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	2a e0       	ldi	r18, 0x0A	; 10
    183e:	31 e0       	ldi	r19, 0x01	; 1
    1840:	f9 01       	movw	r30, r18
    1842:	20 81       	ld	r18, Z
    1844:	32 2f       	mov	r19, r18
    1846:	29 81       	ldd	r18, Y+1	; 0x01
    1848:	20 95       	com	r18
    184a:	23 23       	and	r18, r19
    184c:	fc 01       	movw	r30, r24
    184e:	20 83       	st	Z, r18

		PORTL |= mask;
    1850:	8b e0       	ldi	r24, 0x0B	; 11
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	2b e0       	ldi	r18, 0x0B	; 11
    1856:	31 e0       	ldi	r19, 0x01	; 1
    1858:	f9 01       	movw	r30, r18
    185a:	30 81       	ld	r19, Z
    185c:	29 81       	ldd	r18, Y+1	; 0x01
    185e:	23 2b       	or	r18, r19
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
		break;
    1864:	00 00       	nop
	default:
		break;
	}
}
    1866:	00 00       	nop
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <PIN_LED_1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PIN_LED_1_set_dir(const enum port_dir dir)
{
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	1f 92       	push	r1
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(0, dir);
    187e:	69 81       	ldd	r22, Y+1	; 0x01
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	b4 da       	rcall	.-2712   	; 0xdec <PORTA_set_pin_dir>
}
    1884:	00 00       	nop
    1886:	0f 90       	pop	r0
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <PIN_LED_1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PIN_LED_1_set_level(const bool level)
{
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	1f 92       	push	r1
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(0, level);
    189a:	69 81       	ldd	r22, Y+1	; 0x01
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	15 db       	rcall	.-2518   	; 0xeca <PORTA_set_pin_level>
}
    18a0:	00 00       	nop
    18a2:	0f 90       	pop	r0
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <PIN_LED_2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PIN_LED_2_set_dir(const enum port_dir dir)
{
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	1f 92       	push	r1
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(1, dir);
    18b6:	69 81       	ldd	r22, Y+1	; 0x01
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	98 da       	rcall	.-2768   	; 0xdec <PORTA_set_pin_dir>
}
    18bc:	00 00       	nop
    18be:	0f 90       	pop	r0
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <PIN_LED_2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PIN_LED_2_set_level(const bool level)
{
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	1f 92       	push	r1
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(1, level);
    18d2:	69 81       	ldd	r22, Y+1	; 0x01
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	f9 da       	rcall	.-2574   	; 0xeca <PORTA_set_pin_level>
}
    18d8:	00 00       	nop
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	08 95       	ret

000018e2 <PIN_LED_3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PIN_LED_3_set_dir(const enum port_dir dir)
{
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	1f 92       	push	r1
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
    18ee:	69 81       	ldd	r22, Y+1	; 0x01
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	7c da       	rcall	.-2824   	; 0xdec <PORTA_set_pin_dir>
}
    18f4:	00 00       	nop
    18f6:	0f 90       	pop	r0
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <PIN_LED_3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PIN_LED_3_set_level(const bool level)
{
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	1f 92       	push	r1
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(2, level);
    190a:	69 81       	ldd	r22, Y+1	; 0x01
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	dd da       	rcall	.-2630   	; 0xeca <PORTA_set_pin_level>
}
    1910:	00 00       	nop
    1912:	0f 90       	pop	r0
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	08 95       	ret

0000191a <PB7_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PB7_set_pull_mode(const enum port_pull_mode pull_mode)
{
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	1f 92       	push	r1
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(7, pull_mode);
    1926:	69 81       	ldd	r22, Y+1	; 0x01
    1928:	87 e0       	ldi	r24, 0x07	; 7
    192a:	0a db       	rcall	.-2540   	; 0xf40 <PORTB_set_pin_pull_mode>
}
    192c:	00 00       	nop
    192e:	0f 90       	pop	r0
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <PB7_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB7_set_dir(const enum port_dir dir)
{
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	1f 92       	push	r1
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(7, dir);
    1942:	69 81       	ldd	r22, Y+1	; 0x01
    1944:	87 e0       	ldi	r24, 0x07	; 7
    1946:	98 db       	rcall	.-2256   	; 0x1078 <PORTB_set_pin_dir>
}
    1948:	00 00       	nop
    194a:	0f 90       	pop	r0
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <PIN_PWM_1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PIN_PWM_1_set_dir(const enum port_dir dir)
{
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	1f 92       	push	r1
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	89 83       	std	Y+1, r24	; 0x01
	PORTH_set_pin_dir(4, dir);
    195e:	69 81       	ldd	r22, Y+1	; 0x01
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	af dd       	rcall	.-1186   	; 0x14c2 <PORTH_set_pin_dir>
}
    1964:	00 00       	nop
    1966:	0f 90       	pop	r0
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	08 95       	ret

0000196e <PIN_PWM_1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PIN_PWM_1_set_level(const bool level)
{
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	1f 92       	push	r1
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	89 83       	std	Y+1, r24	; 0x01
	PORTH_set_pin_level(4, level);
    197a:	69 81       	ldd	r22, Y+1	; 0x01
    197c:	84 e0       	ldi	r24, 0x04	; 4
    197e:	10 de       	rcall	.-992    	; 0x15a0 <PORTH_set_pin_level>
}
    1980:	00 00       	nop
    1982:	0f 90       	pop	r0
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <PIN_PWM_2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PIN_PWM_2_set_dir(const enum port_dir dir)
{
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	1f 92       	push	r1
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	89 83       	std	Y+1, r24	; 0x01
	PORTH_set_pin_dir(5, dir);
    1996:	69 81       	ldd	r22, Y+1	; 0x01
    1998:	85 e0       	ldi	r24, 0x05	; 5
    199a:	93 dd       	rcall	.-1242   	; 0x14c2 <PORTH_set_pin_dir>
}
    199c:	00 00       	nop
    199e:	0f 90       	pop	r0
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	08 95       	ret

000019a6 <PIN_PWM_2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PIN_PWM_2_set_level(const bool level)
{
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	1f 92       	push	r1
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	89 83       	std	Y+1, r24	; 0x01
	PORTH_set_pin_level(5, level);
    19b2:	69 81       	ldd	r22, Y+1	; 0x01
    19b4:	85 e0       	ldi	r24, 0x05	; 5
    19b6:	f4 dd       	rcall	.-1048   	; 0x15a0 <PORTH_set_pin_level>
}
    19b8:	00 00       	nop
    19ba:	0f 90       	pop	r0
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <PK0_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK0_set_pull_mode(const enum port_pull_mode pull_mode)
{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	1f 92       	push	r1
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(0, pull_mode);
    19ce:	69 81       	ldd	r22, Y+1	; 0x01
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	6a de       	rcall	.-812    	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    19d4:	00 00       	nop
    19d6:	0f 90       	pop	r0
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <PK1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	1f 92       	push	r1
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(1, pull_mode);
    19ea:	69 81       	ldd	r22, Y+1	; 0x01
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	5c de       	rcall	.-840    	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    19f0:	00 00       	nop
    19f2:	0f 90       	pop	r0
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <PK2_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK2_set_pull_mode(const enum port_pull_mode pull_mode)
{
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	1f 92       	push	r1
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(2, pull_mode);
    1a06:	69 81       	ldd	r22, Y+1	; 0x01
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	4e de       	rcall	.-868    	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    1a0c:	00 00       	nop
    1a0e:	0f 90       	pop	r0
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <PK3_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK3_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	1f 92       	push	r1
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(3, pull_mode);
    1a22:	69 81       	ldd	r22, Y+1	; 0x01
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	40 de       	rcall	.-896    	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    1a28:	00 00       	nop
    1a2a:	0f 90       	pop	r0
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	08 95       	ret

00001a32 <PK4_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK4_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	1f 92       	push	r1
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(4, pull_mode);
    1a3e:	69 81       	ldd	r22, Y+1	; 0x01
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	32 de       	rcall	.-924    	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    1a44:	00 00       	nop
    1a46:	0f 90       	pop	r0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret

00001a4e <PK5_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK5_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	1f 92       	push	r1
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(5, pull_mode);
    1a5a:	69 81       	ldd	r22, Y+1	; 0x01
    1a5c:	85 e0       	ldi	r24, 0x05	; 5
    1a5e:	24 de       	rcall	.-952    	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    1a60:	00 00       	nop
    1a62:	0f 90       	pop	r0
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <PK6_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK6_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	1f 92       	push	r1
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(6, pull_mode);
    1a76:	69 81       	ldd	r22, Y+1	; 0x01
    1a78:	86 e0       	ldi	r24, 0x06	; 6
    1a7a:	16 de       	rcall	.-980    	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    1a7c:	00 00       	nop
    1a7e:	0f 90       	pop	r0
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <PK7_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PK7_set_pull_mode(const enum port_pull_mode pull_mode)
{
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	1f 92       	push	r1
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	89 83       	std	Y+1, r24	; 0x01
	PORTK_set_pin_pull_mode(7, pull_mode);
    1a92:	69 81       	ldd	r22, Y+1	; 0x01
    1a94:	87 e0       	ldi	r24, 0x07	; 7
    1a96:	08 de       	rcall	.-1008   	; 0x16a8 <PORTK_set_pin_pull_mode>
}
    1a98:	00 00       	nop
    1a9a:	0f 90       	pop	r0
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	60 e8       	ldi	r22, 0x80	; 128
    1aae:	81 e6       	ldi	r24, 0x61	; 97
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	b5 d0       	rcall	.+362    	; 0x1c1e <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
    1ab4:	83 e5       	ldi	r24, 0x53	; 83
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	fc 01       	movw	r30, r24
    1aba:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
    1abc:	85 e5       	ldi	r24, 0x55	; 85
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	10 82       	st	Z, r1

	return 0;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	08 95       	ret

00001acc <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM5) | (1 << PRTIM3) | (1 << PRUSART3) | (1 << PRUSART2) | (1 << PRUSART1);
    1ad4:	85 e6       	ldi	r24, 0x65	; 101
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	2f e3       	ldi	r18, 0x3F	; 63
    1ada:	fc 01       	movw	r30, r24
    1adc:	20 83       	st	Z, r18

	PRR0 = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
    1ade:	84 e6       	ldi	r24, 0x64	; 100
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	2f ee       	ldi	r18, 0xEF	; 239
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	20 83       	st	Z, r18

	/* Set all pins to low power mode */
	PORTA_set_port_dir(0xff, PORT_DIR_OFF);
    1ae8:	62 e0       	ldi	r22, 0x02	; 2
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	36 d9       	rcall	.-3476   	; 0xd5a <PORTA_set_port_dir>
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
    1aee:	62 e0       	ldi	r22, 0x02	; 2
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	79 da       	rcall	.-2830   	; 0xfe6 <PORTB_set_port_dir>
	PORTC_set_port_dir(0xff, PORT_DIR_OFF);
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	2e db       	rcall	.-2468   	; 0x1156 <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
    1afa:	62 e0       	ldi	r22, 0x02	; 2
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	74 db       	rcall	.-2328   	; 0x11e8 <PORTD_set_port_dir>
	PORTE_set_port_dir(0xff, PORT_DIR_OFF);
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	ba db       	rcall	.-2188   	; 0x127a <PORTE_set_port_dir>
	PORTF_set_port_dir(0xff, PORT_DIR_OFF);
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	00 dc       	rcall	.-2048   	; 0x130c <PORTF_set_port_dir>
	PORTG_set_port_dir(0x3f, PORT_DIR_OFF);
    1b0c:	62 e0       	ldi	r22, 0x02	; 2
    1b0e:	8f e3       	ldi	r24, 0x3F	; 63
    1b10:	46 dc       	rcall	.-1908   	; 0x139e <PORTG_set_port_dir>
	PORTH_set_port_dir(0xff, PORT_DIR_OFF);
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	8c dc       	rcall	.-1768   	; 0x1430 <PORTH_set_port_dir>
	PORTJ_set_port_dir(0xff, PORT_DIR_OFF);
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	8f ef       	ldi	r24, 0xFF	; 255
    1b1c:	7c dd       	rcall	.-1288   	; 0x1616 <PORTJ_set_port_dir>
	PORTK_set_port_dir(0xff, PORT_DIR_OFF);
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	15 de       	rcall	.-982    	; 0x174e <PORTK_set_port_dir>
    1b24:	62 e0       	ldi	r22, 0x02	; 2
	PORTL_set_port_dir(0xff, PORT_DIR_OFF);
    1b26:	8f ef       	ldi	r24, 0xFF	; 255
    1b28:	5b de       	rcall	.-842    	; 0x17e0 <PORTL_set_port_dir>
    1b2a:	00 00       	nop
    1b2c:	df 91       	pop	r29
}
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <EXTERNAL_IRQ_0_initialization>:
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29

#include "driver_init.h"
#include <system.h>

void EXTERNAL_IRQ_0_initialization(void)
{
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PB7_set_dir(PORT_DIR_IN);
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	fc de       	rcall	.-520    	; 0x1936 <PB7_set_dir>

	PB7_set_pull_mode(
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	EXTERNAL_IRQ_0_init();
    1b40:	ec de       	rcall	.-552    	; 0x191a <PB7_set_pull_mode>
    1b42:	5b d0       	rcall	.+182    	; 0x1bfa <EXTERNAL_IRQ_0_init>
}
    1b44:	00 00       	nop
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <ADC_0_initialization>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62

	// Disable pull-up.
	PK0_set_pull_mode(PORT_PULL_OFF);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	35 df       	rcall	.-406    	; 0x19c2 <PK0_set_pull_mode>

	// Disable pull-up.
	PK1_set_pull_mode(PORT_PULL_OFF);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	41 df       	rcall	.-382    	; 0x19de <PK1_set_pull_mode>

	// Disable pull-up.
	PK2_set_pull_mode(PORT_PULL_OFF);
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	4d df       	rcall	.-358    	; 0x19fa <PK2_set_pull_mode>

	// Disable pull-up.
	PK3_set_pull_mode(PORT_PULL_OFF);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	59 df       	rcall	.-334    	; 0x1a16 <PK3_set_pull_mode>

	// Disable pull-up.
	PK4_set_pull_mode(PORT_PULL_OFF);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	65 df       	rcall	.-310    	; 0x1a32 <PK4_set_pull_mode>

	// Disable pull-up.
	PK5_set_pull_mode(PORT_PULL_OFF);
    1b68:	80 e0       	ldi	r24, 0x00	; 0

	// Disable pull-up.
	PK6_set_pull_mode(PORT_PULL_OFF);
    1b6a:	71 df       	rcall	.-286    	; 0x1a4e <PK5_set_pull_mode>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	7d df       	rcall	.-262    	; 0x1a6a <PK6_set_pull_mode>

	// Disable pull-up.
	PK7_set_pull_mode(PORT_PULL_OFF);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	89 df       	rcall	.-238    	; 0x1a86 <PK7_set_pull_mode>
    1b74:	1b d8       	rcall	.-4042   	; 0xbac <ADC_0_init>

	ADC_0_init();
    1b76:	00 00       	nop
    1b78:	df 91       	pop	r29
}
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <TIMER_2_initialization>:
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29

void TIMER_2_initialization(void)
{
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62

	TIMER_2_init();
    1b86:	7c d0       	rcall	.+248    	; 0x1c80 <TIMER_2_init>
}
    1b88:	00 00       	nop
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <TIMER_1_initialization>:

void TIMER_1_initialization(void)
{
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62

	TIMER_1_init();
    1b98:	8e d0       	rcall	.+284    	; 0x1cb6 <TIMER_1_init>
}
    1b9a:	00 00       	nop
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	08 95       	ret

00001ba2 <TIMER_0_initialization>:

void TIMER_0_initialization(void)
{
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62

	TIMER_0_init();
    1baa:	41 d0       	rcall	.+130    	; 0x1c2e <TIMER_0_init>
}
    1bac:	00 00       	nop
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1bbc:	87 df       	rcall	.-242    	; 0x1acc <mcu_init>

	/* PORT setting on PA0 */

	// Set pin direction to output
	PIN_LED_1_set_dir(PORT_DIR_OUT);
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	58 de       	rcall	.-848    	; 0x1872 <PIN_LED_1_set_dir>

	PIN_LED_1_set_level(
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	64 de       	rcall	.-824    	; 0x188e <PIN_LED_1_set_level>
	    true);

	/* PORT setting on PA1 */

	// Set pin direction to output
	PIN_LED_2_set_dir(PORT_DIR_OUT);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	70 de       	rcall	.-800    	; 0x18aa <PIN_LED_2_set_dir>

	PIN_LED_2_set_level(
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	7c de       	rcall	.-776    	; 0x18c6 <PIN_LED_2_set_level>
	    true);

	/* PORT setting on PA2 */

	// Set pin direction to output
	PIN_LED_3_set_dir(PORT_DIR_OUT);
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	88 de       	rcall	.-752    	; 0x18e2 <PIN_LED_3_set_dir>

	PIN_LED_3_set_level(
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	94 de       	rcall	.-728    	; 0x18fe <PIN_LED_3_set_level>
	    true);

	/* PORT setting on PH4 */

	// Set pin direction to output
	PIN_PWM_1_set_dir(PORT_DIR_OUT);
    1bd6:	81 e0       	ldi	r24, 0x01	; 1

	PIN_PWM_1_set_level(
    1bd8:	bc de       	rcall	.-648    	; 0x1952 <PIN_PWM_1_set_dir>
	    false);

	/* PORT setting on PH5 */

	// Set pin direction to output
	PIN_PWM_2_set_dir(PORT_DIR_OUT);
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	c8 de       	rcall	.-624    	; 0x196e <PIN_PWM_1_set_level>

	PIN_PWM_2_set_level(
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	d4 de       	rcall	.-600    	; 0x198a <PIN_PWM_2_set_dir>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	sysctrl_init();
    1be4:	e0 de       	rcall	.-576    	; 0x19a6 <PIN_PWM_2_set_level>
    1be6:	5d df       	rcall	.-326    	; 0x1aa2 <sysctrl_init>

	EXTERNAL_IRQ_0_initialization();
    1be8:	a4 df       	rcall	.-184    	; 0x1b32 <EXTERNAL_IRQ_0_initialization>
    1bea:	b0 df       	rcall	.-160    	; 0x1b4c <ADC_0_initialization>

	ADC_0_initialization();
    1bec:	c8 df       	rcall	.-112    	; 0x1b7e <TIMER_2_initialization>
    1bee:	d0 df       	rcall	.-96     	; 0x1b90 <TIMER_1_initialization>

	TIMER_2_initialization();
    1bf0:	d8 df       	rcall	.-80     	; 0x1ba2 <TIMER_0_initialization>
    1bf2:	00 00       	nop

	TIMER_1_initialization();
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28

	TIMER_0_initialization();
    1bf8:	08 95       	ret

00001bfa <EXTERNAL_IRQ_0_init>:
 * \brief Initialize EXTERNAL_IRQ_0 interface
 *
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62

	PCICR = (1 << PCIE0); // Enable pin change interrupt 0
    1c02:	88 e6       	ldi	r24, 0x68	; 104
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	21 e0       	ldi	r18, 0x01	; 1
    1c08:	fc 01       	movw	r30, r24
    1c0a:	20 83       	st	Z, r18

	PCMSK0 = (1 << PCINT7); // Pin change enable mask 7
    1c0c:	8b e6       	ldi	r24, 0x6B	; 107
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	20 e8       	ldi	r18, 0x80	; 128
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18

	return 0;
    1c16:	80 e0       	ldi	r24, 0x00	; 0
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
    1c1e:	2f b7       	in	r18, 0x3f	; 63
	cli
    1c20:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    1c22:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    1c24:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
    1c26:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
    1c28:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
    1c2a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
    1c2c:	08 95       	ret

00001c2e <TIMER_0_init>:
 * \brief Initialize TIMER_0 interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
    1c36:	84 e6       	ldi	r24, 0x64	; 100
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	24 e6       	ldi	r18, 0x64	; 100
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	f9 01       	movw	r30, r18
    1c40:	20 81       	ld	r18, Z
    1c42:	27 7f       	andi	r18, 0xF7	; 247
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 83       	st	Z, r18

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 12 CTC */

	TCCR1B = (1 << WGM13) | (1 << WGM12)                /* TC16 Mode 12 CTC */
    1c48:	81 e8       	ldi	r24, 0x81	; 129
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	2a e1       	ldi	r18, 0x1A	; 26
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18
	         | 0 << ICNC1                               /* Input Capture Noise Canceler: disabled */
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (0 << CS12) | (1 << CS11) | (0 << CS10); /* IO clock divided by 8 */

	ICR1 = 0xff; /* Top counter value: 0xff */
    1c52:	86 e8       	ldi	r24, 0x86	; 134
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	2f ef       	ldi	r18, 0xFF	; 255
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	31 83       	std	Z+1, r19	; 0x01
    1c5e:	20 83       	st	Z, r18

	OCR1A = 0xaa; /* Output compare A: 0xaa */
    1c60:	88 e8       	ldi	r24, 0x88	; 136
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	2a ea       	ldi	r18, 0xAA	; 170
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	fc 01       	movw	r30, r24
    1c6a:	31 83       	std	Z+1, r19	; 0x01
    1c6c:	20 83       	st	Z, r18

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	TIMSK1 = 0 << OCIE1B   /* Output Compare B Match Interrupt Enable: disabled */
    1c6e:	8f e6       	ldi	r24, 0x6F	; 111
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	22 e0       	ldi	r18, 0x02	; 2
    1c74:	fc 01       	movw	r30, r24
    1c76:	20 83       	st	Z, r18
	         | 1 << OCIE1A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE1  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
    1c78:	80 e0       	ldi	r24, 0x00	; 0
}
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <TIMER_2_init>:
 * \brief Initialize TIMER_2 interface
 *
 * \return Initialization status.
 */
int8_t TIMER_2_init()
{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
    1c88:	84 e6       	ldi	r24, 0x64	; 100
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	24 e6       	ldi	r18, 0x64	; 100
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	f9 01       	movw	r30, r18
    1c92:	20 81       	ld	r18, Z
    1c94:	2f 7d       	andi	r18, 0xDF	; 223
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 83       	st	Z, r18

	// TCCR0A = (0 << COM0A1) | (0 << COM0A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM0B1) | (0 << COM0B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM01) | (0 << WGM00); /* TC8 Mode 0 Normal */

	TCCR0B = 0                                          /* TC8 Mode 0 Normal */
    1c9a:	85 e4       	ldi	r24, 0x45	; 69
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	22 e0       	ldi	r18, 0x02	; 2
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	20 83       	st	Z, r18
	         | (0 << CS02) | (1 << CS01) | (0 << CS00); /* IO clock divided by 8 */

	TIMSK0 = 0 << OCIE0B   /* Output Compare B Match Interrupt Enable: disabled */
    1ca4:	8e e6       	ldi	r24, 0x6E	; 110
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	22 e0       	ldi	r18, 0x02	; 2
    1caa:	fc 01       	movw	r30, r24
    1cac:	20 83       	st	Z, r18

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
}
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <TIMER_1_init>:
 * \brief Initialize TIMER_1 interface
 *
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62

	/* Enable TC2 */
	PRR0 &= ~(1 << PRTIM2);
    1cbe:	84 e6       	ldi	r24, 0x64	; 100
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	24 e6       	ldi	r18, 0x64	; 100
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	f9 01       	movw	r30, r18
    1cc8:	20 81       	ld	r18, Z
    1cca:	2f 7b       	andi	r18, 0xBF	; 191
    1ccc:	fc 01       	movw	r30, r24
    1cce:	20 83       	st	Z, r18

	// TCCR2A = (0 << COM2A1) | (0 << COM2A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM2B1) | (0 << COM2B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM21) | (0 << WGM20); /* TC8 Mode 0 Normal */

	TCCR2B = 0                                          /* TC8 Mode 0 Normal */
    1cd0:	81 eb       	ldi	r24, 0xB1	; 177
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	22 e0       	ldi	r18, 0x02	; 2
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	20 83       	st	Z, r18
	         | (0 << CS22) | (1 << CS21) | (0 << CS20); /* IO clock divided by 8 */

	TIMSK2 = 0 << OCIE2B   /* Output Compare B Match Interrupt Enable: disabled */
    1cda:	80 e7       	ldi	r24, 0x70	; 112
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	22 e0       	ldi	r18, 0x02	; 2
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	20 83       	st	Z, r18

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <__subsf3>:
    1cec:	50 58       	subi	r21, 0x80	; 128

00001cee <__addsf3>:
    1cee:	bb 27       	eor	r27, r27
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	0e d0       	rcall	.+28     	; 0x1d10 <__addsf3x>
    1cf4:	0d c1       	rjmp	.+538    	; 0x1f10 <__fp_round>
    1cf6:	fe d0       	rcall	.+508    	; 0x1ef4 <__fp_pscA>
    1cf8:	30 f0       	brcs	.+12     	; 0x1d06 <__addsf3+0x18>
    1cfa:	03 d1       	rcall	.+518    	; 0x1f02 <__fp_pscB>
    1cfc:	20 f0       	brcs	.+8      	; 0x1d06 <__addsf3+0x18>
    1cfe:	31 f4       	brne	.+12     	; 0x1d0c <__addsf3+0x1e>
    1d00:	9f 3f       	cpi	r25, 0xFF	; 255
    1d02:	11 f4       	brne	.+4      	; 0x1d08 <__addsf3+0x1a>
    1d04:	1e f4       	brtc	.+6      	; 0x1d0c <__addsf3+0x1e>
    1d06:	f3 c0       	rjmp	.+486    	; 0x1eee <__fp_nan>
    1d08:	0e f4       	brtc	.+2      	; 0x1d0c <__addsf3+0x1e>
    1d0a:	e0 95       	com	r30
    1d0c:	e7 fb       	bst	r30, 7
    1d0e:	e9 c0       	rjmp	.+466    	; 0x1ee2 <__fp_inf>

00001d10 <__addsf3x>:
    1d10:	e9 2f       	mov	r30, r25
    1d12:	0f d1       	rcall	.+542    	; 0x1f32 <__fp_split3>
    1d14:	80 f3       	brcs	.-32     	; 0x1cf6 <__addsf3+0x8>
    1d16:	ba 17       	cp	r27, r26
    1d18:	62 07       	cpc	r22, r18
    1d1a:	73 07       	cpc	r23, r19
    1d1c:	84 07       	cpc	r24, r20
    1d1e:	95 07       	cpc	r25, r21
    1d20:	18 f0       	brcs	.+6      	; 0x1d28 <__addsf3x+0x18>
    1d22:	71 f4       	brne	.+28     	; 0x1d40 <__addsf3x+0x30>
    1d24:	9e f5       	brtc	.+102    	; 0x1d8c <__addsf3x+0x7c>
    1d26:	27 c1       	rjmp	.+590    	; 0x1f76 <__fp_zero>
    1d28:	0e f4       	brtc	.+2      	; 0x1d2c <__addsf3x+0x1c>
    1d2a:	e0 95       	com	r30
    1d2c:	0b 2e       	mov	r0, r27
    1d2e:	ba 2f       	mov	r27, r26
    1d30:	a0 2d       	mov	r26, r0
    1d32:	0b 01       	movw	r0, r22
    1d34:	b9 01       	movw	r22, r18
    1d36:	90 01       	movw	r18, r0
    1d38:	0c 01       	movw	r0, r24
    1d3a:	ca 01       	movw	r24, r20
    1d3c:	a0 01       	movw	r20, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	ff 27       	eor	r31, r31
    1d42:	59 1b       	sub	r21, r25
    1d44:	99 f0       	breq	.+38     	; 0x1d6c <__addsf3x+0x5c>
    1d46:	59 3f       	cpi	r21, 0xF9	; 249
    1d48:	50 f4       	brcc	.+20     	; 0x1d5e <__addsf3x+0x4e>
    1d4a:	50 3e       	cpi	r21, 0xE0	; 224
    1d4c:	68 f1       	brcs	.+90     	; 0x1da8 <__addsf3x+0x98>
    1d4e:	1a 16       	cp	r1, r26
    1d50:	f0 40       	sbci	r31, 0x00	; 0
    1d52:	a2 2f       	mov	r26, r18
    1d54:	23 2f       	mov	r18, r19
    1d56:	34 2f       	mov	r19, r20
    1d58:	44 27       	eor	r20, r20
    1d5a:	58 5f       	subi	r21, 0xF8	; 248
    1d5c:	f3 cf       	rjmp	.-26     	; 0x1d44 <__addsf3x+0x34>
    1d5e:	46 95       	lsr	r20
    1d60:	37 95       	ror	r19
    1d62:	27 95       	ror	r18
    1d64:	a7 95       	ror	r26
    1d66:	f0 40       	sbci	r31, 0x00	; 0
    1d68:	53 95       	inc	r21
    1d6a:	c9 f7       	brne	.-14     	; 0x1d5e <__addsf3x+0x4e>
    1d6c:	7e f4       	brtc	.+30     	; 0x1d8c <__addsf3x+0x7c>
    1d6e:	1f 16       	cp	r1, r31
    1d70:	ba 0b       	sbc	r27, r26
    1d72:	62 0b       	sbc	r22, r18
    1d74:	73 0b       	sbc	r23, r19
    1d76:	84 0b       	sbc	r24, r20
    1d78:	ba f0       	brmi	.+46     	; 0x1da8 <__addsf3x+0x98>
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	a1 f0       	breq	.+40     	; 0x1da6 <__addsf3x+0x96>
    1d7e:	ff 0f       	add	r31, r31
    1d80:	bb 1f       	adc	r27, r27
    1d82:	66 1f       	adc	r22, r22
    1d84:	77 1f       	adc	r23, r23
    1d86:	88 1f       	adc	r24, r24
    1d88:	c2 f7       	brpl	.-16     	; 0x1d7a <__addsf3x+0x6a>
    1d8a:	0e c0       	rjmp	.+28     	; 0x1da8 <__addsf3x+0x98>
    1d8c:	ba 0f       	add	r27, r26
    1d8e:	62 1f       	adc	r22, r18
    1d90:	73 1f       	adc	r23, r19
    1d92:	84 1f       	adc	r24, r20
    1d94:	48 f4       	brcc	.+18     	; 0x1da8 <__addsf3x+0x98>
    1d96:	87 95       	ror	r24
    1d98:	77 95       	ror	r23
    1d9a:	67 95       	ror	r22
    1d9c:	b7 95       	ror	r27
    1d9e:	f7 95       	ror	r31
    1da0:	9e 3f       	cpi	r25, 0xFE	; 254
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <__addsf3x+0x96>
    1da4:	b3 cf       	rjmp	.-154    	; 0x1d0c <__addsf3+0x1e>
    1da6:	93 95       	inc	r25
    1da8:	88 0f       	add	r24, r24
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <__addsf3x+0x9e>
    1dac:	99 27       	eor	r25, r25
    1dae:	ee 0f       	add	r30, r30
    1db0:	97 95       	ror	r25
    1db2:	87 95       	ror	r24
    1db4:	08 95       	ret

00001db6 <__cmpsf2>:
    1db6:	71 d0       	rcall	.+226    	; 0x1e9a <__fp_cmp>
    1db8:	08 f4       	brcc	.+2      	; 0x1dbc <__cmpsf2+0x6>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	08 95       	ret

00001dbe <__fixsfsi>:
    1dbe:	04 d0       	rcall	.+8      	; 0x1dc8 <__fixunssfsi>
    1dc0:	68 94       	set
    1dc2:	b1 11       	cpse	r27, r1
    1dc4:	d9 c0       	rjmp	.+434    	; 0x1f78 <__fp_szero>
    1dc6:	08 95       	ret

00001dc8 <__fixunssfsi>:
    1dc8:	bc d0       	rcall	.+376    	; 0x1f42 <__fp_splitA>
    1dca:	88 f0       	brcs	.+34     	; 0x1dee <__fixunssfsi+0x26>
    1dcc:	9f 57       	subi	r25, 0x7F	; 127
    1dce:	90 f0       	brcs	.+36     	; 0x1df4 <__fixunssfsi+0x2c>
    1dd0:	b9 2f       	mov	r27, r25
    1dd2:	99 27       	eor	r25, r25
    1dd4:	b7 51       	subi	r27, 0x17	; 23
    1dd6:	a0 f0       	brcs	.+40     	; 0x1e00 <__fixunssfsi+0x38>
    1dd8:	d1 f0       	breq	.+52     	; 0x1e0e <__fixunssfsi+0x46>
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	1a f0       	brmi	.+6      	; 0x1dea <__fixunssfsi+0x22>
    1de4:	ba 95       	dec	r27
    1de6:	c9 f7       	brne	.-14     	; 0x1dda <__fixunssfsi+0x12>
    1de8:	12 c0       	rjmp	.+36     	; 0x1e0e <__fixunssfsi+0x46>
    1dea:	b1 30       	cpi	r27, 0x01	; 1
    1dec:	81 f0       	breq	.+32     	; 0x1e0e <__fixunssfsi+0x46>
    1dee:	c3 d0       	rcall	.+390    	; 0x1f76 <__fp_zero>
    1df0:	b1 e0       	ldi	r27, 0x01	; 1
    1df2:	08 95       	ret
    1df4:	c0 c0       	rjmp	.+384    	; 0x1f76 <__fp_zero>
    1df6:	67 2f       	mov	r22, r23
    1df8:	78 2f       	mov	r23, r24
    1dfa:	88 27       	eor	r24, r24
    1dfc:	b8 5f       	subi	r27, 0xF8	; 248
    1dfe:	39 f0       	breq	.+14     	; 0x1e0e <__fixunssfsi+0x46>
    1e00:	b9 3f       	cpi	r27, 0xF9	; 249
    1e02:	cc f3       	brlt	.-14     	; 0x1df6 <__fixunssfsi+0x2e>
    1e04:	86 95       	lsr	r24
    1e06:	77 95       	ror	r23
    1e08:	67 95       	ror	r22
    1e0a:	b3 95       	inc	r27
    1e0c:	d9 f7       	brne	.-10     	; 0x1e04 <__fixunssfsi+0x3c>
    1e0e:	3e f4       	brtc	.+14     	; 0x1e1e <__fixunssfsi+0x56>
    1e10:	90 95       	com	r25
    1e12:	80 95       	com	r24
    1e14:	70 95       	com	r23
    1e16:	61 95       	neg	r22
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	08 95       	ret

00001e20 <__floatunsisf>:
    1e20:	e8 94       	clt
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <__floatsisf+0x12>

00001e24 <__floatsisf>:
    1e24:	97 fb       	bst	r25, 7
    1e26:	3e f4       	brtc	.+14     	; 0x1e36 <__floatsisf+0x12>
    1e28:	90 95       	com	r25
    1e2a:	80 95       	com	r24
    1e2c:	70 95       	com	r23
    1e2e:	61 95       	neg	r22
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	8f 4f       	sbci	r24, 0xFF	; 255
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	99 23       	and	r25, r25
    1e38:	a9 f0       	breq	.+42     	; 0x1e64 <__floatsisf+0x40>
    1e3a:	f9 2f       	mov	r31, r25
    1e3c:	96 e9       	ldi	r25, 0x96	; 150
    1e3e:	bb 27       	eor	r27, r27
    1e40:	93 95       	inc	r25
    1e42:	f6 95       	lsr	r31
    1e44:	87 95       	ror	r24
    1e46:	77 95       	ror	r23
    1e48:	67 95       	ror	r22
    1e4a:	b7 95       	ror	r27
    1e4c:	f1 11       	cpse	r31, r1
    1e4e:	f8 cf       	rjmp	.-16     	; 0x1e40 <__floatsisf+0x1c>
    1e50:	fa f4       	brpl	.+62     	; 0x1e90 <__floatsisf+0x6c>
    1e52:	bb 0f       	add	r27, r27
    1e54:	11 f4       	brne	.+4      	; 0x1e5a <__floatsisf+0x36>
    1e56:	60 ff       	sbrs	r22, 0
    1e58:	1b c0       	rjmp	.+54     	; 0x1e90 <__floatsisf+0x6c>
    1e5a:	6f 5f       	subi	r22, 0xFF	; 255
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	16 c0       	rjmp	.+44     	; 0x1e90 <__floatsisf+0x6c>
    1e64:	88 23       	and	r24, r24
    1e66:	11 f0       	breq	.+4      	; 0x1e6c <__floatsisf+0x48>
    1e68:	96 e9       	ldi	r25, 0x96	; 150
    1e6a:	11 c0       	rjmp	.+34     	; 0x1e8e <__floatsisf+0x6a>
    1e6c:	77 23       	and	r23, r23
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <__floatsisf+0x54>
    1e70:	9e e8       	ldi	r25, 0x8E	; 142
    1e72:	87 2f       	mov	r24, r23
    1e74:	76 2f       	mov	r23, r22
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <__floatsisf+0x5e>
    1e78:	66 23       	and	r22, r22
    1e7a:	71 f0       	breq	.+28     	; 0x1e98 <__floatsisf+0x74>
    1e7c:	96 e8       	ldi	r25, 0x86	; 134
    1e7e:	86 2f       	mov	r24, r22
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	2a f0       	brmi	.+10     	; 0x1e90 <__floatsisf+0x6c>
    1e86:	9a 95       	dec	r25
    1e88:	66 0f       	add	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	da f7       	brpl	.-10     	; 0x1e86 <__floatsisf+0x62>
    1e90:	88 0f       	add	r24, r24
    1e92:	96 95       	lsr	r25
    1e94:	87 95       	ror	r24
    1e96:	97 f9       	bld	r25, 7
    1e98:	08 95       	ret

00001e9a <__fp_cmp>:
    1e9a:	99 0f       	add	r25, r25
    1e9c:	00 08       	sbc	r0, r0
    1e9e:	55 0f       	add	r21, r21
    1ea0:	aa 0b       	sbc	r26, r26
    1ea2:	e0 e8       	ldi	r30, 0x80	; 128
    1ea4:	fe ef       	ldi	r31, 0xFE	; 254
    1ea6:	16 16       	cp	r1, r22
    1ea8:	17 06       	cpc	r1, r23
    1eaa:	e8 07       	cpc	r30, r24
    1eac:	f9 07       	cpc	r31, r25
    1eae:	c0 f0       	brcs	.+48     	; 0x1ee0 <__fp_cmp+0x46>
    1eb0:	12 16       	cp	r1, r18
    1eb2:	13 06       	cpc	r1, r19
    1eb4:	e4 07       	cpc	r30, r20
    1eb6:	f5 07       	cpc	r31, r21
    1eb8:	98 f0       	brcs	.+38     	; 0x1ee0 <__fp_cmp+0x46>
    1eba:	62 1b       	sub	r22, r18
    1ebc:	73 0b       	sbc	r23, r19
    1ebe:	84 0b       	sbc	r24, r20
    1ec0:	95 0b       	sbc	r25, r21
    1ec2:	39 f4       	brne	.+14     	; 0x1ed2 <__fp_cmp+0x38>
    1ec4:	0a 26       	eor	r0, r26
    1ec6:	61 f0       	breq	.+24     	; 0x1ee0 <__fp_cmp+0x46>
    1ec8:	23 2b       	or	r18, r19
    1eca:	24 2b       	or	r18, r20
    1ecc:	25 2b       	or	r18, r21
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <__fp_cmp+0x3e>
    1ed0:	08 95       	ret
    1ed2:	0a 26       	eor	r0, r26
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <__fp_cmp+0x3e>
    1ed6:	a1 40       	sbci	r26, 0x01	; 1
    1ed8:	a6 95       	lsr	r26
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	81 1d       	adc	r24, r1
    1ede:	81 1d       	adc	r24, r1
    1ee0:	08 95       	ret

00001ee2 <__fp_inf>:
    1ee2:	97 f9       	bld	r25, 7
    1ee4:	9f 67       	ori	r25, 0x7F	; 127
    1ee6:	80 e8       	ldi	r24, 0x80	; 128
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	08 95       	ret

00001eee <__fp_nan>:
    1eee:	9f ef       	ldi	r25, 0xFF	; 255
    1ef0:	80 ec       	ldi	r24, 0xC0	; 192
    1ef2:	08 95       	ret

00001ef4 <__fp_pscA>:
    1ef4:	00 24       	eor	r0, r0
    1ef6:	0a 94       	dec	r0
    1ef8:	16 16       	cp	r1, r22
    1efa:	17 06       	cpc	r1, r23
    1efc:	18 06       	cpc	r1, r24
    1efe:	09 06       	cpc	r0, r25
    1f00:	08 95       	ret

00001f02 <__fp_pscB>:
    1f02:	00 24       	eor	r0, r0
    1f04:	0a 94       	dec	r0
    1f06:	12 16       	cp	r1, r18
    1f08:	13 06       	cpc	r1, r19
    1f0a:	14 06       	cpc	r1, r20
    1f0c:	05 06       	cpc	r0, r21
    1f0e:	08 95       	ret

00001f10 <__fp_round>:
    1f10:	09 2e       	mov	r0, r25
    1f12:	03 94       	inc	r0
    1f14:	00 0c       	add	r0, r0
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <__fp_round+0xc>
    1f18:	88 23       	and	r24, r24
    1f1a:	52 f0       	brmi	.+20     	; 0x1f30 <__fp_round+0x20>
    1f1c:	bb 0f       	add	r27, r27
    1f1e:	40 f4       	brcc	.+16     	; 0x1f30 <__fp_round+0x20>
    1f20:	bf 2b       	or	r27, r31
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <__fp_round+0x18>
    1f24:	60 ff       	sbrs	r22, 0
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <__fp_round+0x20>
    1f28:	6f 5f       	subi	r22, 0xFF	; 255
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	08 95       	ret

00001f32 <__fp_split3>:
    1f32:	57 fd       	sbrc	r21, 7
    1f34:	90 58       	subi	r25, 0x80	; 128
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	59 f0       	breq	.+22     	; 0x1f52 <__fp_splitA+0x10>
    1f3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f3e:	71 f0       	breq	.+28     	; 0x1f5c <__fp_splitA+0x1a>
    1f40:	47 95       	ror	r20

00001f42 <__fp_splitA>:
    1f42:	88 0f       	add	r24, r24
    1f44:	97 fb       	bst	r25, 7
    1f46:	99 1f       	adc	r25, r25
    1f48:	61 f0       	breq	.+24     	; 0x1f62 <__fp_splitA+0x20>
    1f4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f4c:	79 f0       	breq	.+30     	; 0x1f6c <__fp_splitA+0x2a>
    1f4e:	87 95       	ror	r24
    1f50:	08 95       	ret
    1f52:	12 16       	cp	r1, r18
    1f54:	13 06       	cpc	r1, r19
    1f56:	14 06       	cpc	r1, r20
    1f58:	55 1f       	adc	r21, r21
    1f5a:	f2 cf       	rjmp	.-28     	; 0x1f40 <__fp_split3+0xe>
    1f5c:	46 95       	lsr	r20
    1f5e:	f1 df       	rcall	.-30     	; 0x1f42 <__fp_splitA>
    1f60:	08 c0       	rjmp	.+16     	; 0x1f72 <__fp_splitA+0x30>
    1f62:	16 16       	cp	r1, r22
    1f64:	17 06       	cpc	r1, r23
    1f66:	18 06       	cpc	r1, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	f1 cf       	rjmp	.-30     	; 0x1f4e <__fp_splitA+0xc>
    1f6c:	86 95       	lsr	r24
    1f6e:	71 05       	cpc	r23, r1
    1f70:	61 05       	cpc	r22, r1
    1f72:	08 94       	sec
    1f74:	08 95       	ret

00001f76 <__fp_zero>:
    1f76:	e8 94       	clt

00001f78 <__fp_szero>:
    1f78:	bb 27       	eor	r27, r27
    1f7a:	66 27       	eor	r22, r22
    1f7c:	77 27       	eor	r23, r23
    1f7e:	cb 01       	movw	r24, r22
    1f80:	97 f9       	bld	r25, 7
    1f82:	08 95       	ret

00001f84 <__gesf2>:
    1f84:	8a df       	rcall	.-236    	; 0x1e9a <__fp_cmp>
    1f86:	08 f4       	brcc	.+2      	; 0x1f8a <__gesf2+0x6>
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	08 95       	ret

00001f8c <__mulsf3>:
    1f8c:	0b d0       	rcall	.+22     	; 0x1fa4 <__mulsf3x>
    1f8e:	c0 cf       	rjmp	.-128    	; 0x1f10 <__fp_round>
    1f90:	b1 df       	rcall	.-158    	; 0x1ef4 <__fp_pscA>
    1f92:	28 f0       	brcs	.+10     	; 0x1f9e <__mulsf3+0x12>
    1f94:	b6 df       	rcall	.-148    	; 0x1f02 <__fp_pscB>
    1f96:	18 f0       	brcs	.+6      	; 0x1f9e <__mulsf3+0x12>
    1f98:	95 23       	and	r25, r21
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <__mulsf3+0x12>
    1f9c:	a2 cf       	rjmp	.-188    	; 0x1ee2 <__fp_inf>
    1f9e:	a7 cf       	rjmp	.-178    	; 0x1eee <__fp_nan>
    1fa0:	11 24       	eor	r1, r1
    1fa2:	ea cf       	rjmp	.-44     	; 0x1f78 <__fp_szero>

00001fa4 <__mulsf3x>:
    1fa4:	c6 df       	rcall	.-116    	; 0x1f32 <__fp_split3>
    1fa6:	a0 f3       	brcs	.-24     	; 0x1f90 <__mulsf3+0x4>

00001fa8 <__mulsf3_pse>:
    1fa8:	95 9f       	mul	r25, r21
    1faa:	d1 f3       	breq	.-12     	; 0x1fa0 <__mulsf3+0x14>
    1fac:	95 0f       	add	r25, r21
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	55 1f       	adc	r21, r21
    1fb2:	62 9f       	mul	r22, r18
    1fb4:	f0 01       	movw	r30, r0
    1fb6:	72 9f       	mul	r23, r18
    1fb8:	bb 27       	eor	r27, r27
    1fba:	f0 0d       	add	r31, r0
    1fbc:	b1 1d       	adc	r27, r1
    1fbe:	63 9f       	mul	r22, r19
    1fc0:	aa 27       	eor	r26, r26
    1fc2:	f0 0d       	add	r31, r0
    1fc4:	b1 1d       	adc	r27, r1
    1fc6:	aa 1f       	adc	r26, r26
    1fc8:	64 9f       	mul	r22, r20
    1fca:	66 27       	eor	r22, r22
    1fcc:	b0 0d       	add	r27, r0
    1fce:	a1 1d       	adc	r26, r1
    1fd0:	66 1f       	adc	r22, r22
    1fd2:	82 9f       	mul	r24, r18
    1fd4:	22 27       	eor	r18, r18
    1fd6:	b0 0d       	add	r27, r0
    1fd8:	a1 1d       	adc	r26, r1
    1fda:	62 1f       	adc	r22, r18
    1fdc:	73 9f       	mul	r23, r19
    1fde:	b0 0d       	add	r27, r0
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	62 1f       	adc	r22, r18
    1fe4:	83 9f       	mul	r24, r19
    1fe6:	a0 0d       	add	r26, r0
    1fe8:	61 1d       	adc	r22, r1
    1fea:	22 1f       	adc	r18, r18
    1fec:	74 9f       	mul	r23, r20
    1fee:	33 27       	eor	r19, r19
    1ff0:	a0 0d       	add	r26, r0
    1ff2:	61 1d       	adc	r22, r1
    1ff4:	23 1f       	adc	r18, r19
    1ff6:	84 9f       	mul	r24, r20
    1ff8:	60 0d       	add	r22, r0
    1ffa:	21 1d       	adc	r18, r1
    1ffc:	82 2f       	mov	r24, r18
    1ffe:	76 2f       	mov	r23, r22
    2000:	6a 2f       	mov	r22, r26
    2002:	11 24       	eor	r1, r1
    2004:	9f 57       	subi	r25, 0x7F	; 127
    2006:	50 40       	sbci	r21, 0x00	; 0
    2008:	8a f0       	brmi	.+34     	; 0x202c <__mulsf3_pse+0x84>
    200a:	e1 f0       	breq	.+56     	; 0x2044 <__mulsf3_pse+0x9c>
    200c:	88 23       	and	r24, r24
    200e:	4a f0       	brmi	.+18     	; 0x2022 <__mulsf3_pse+0x7a>
    2010:	ee 0f       	add	r30, r30
    2012:	ff 1f       	adc	r31, r31
    2014:	bb 1f       	adc	r27, r27
    2016:	66 1f       	adc	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	88 1f       	adc	r24, r24
    201c:	91 50       	subi	r25, 0x01	; 1
    201e:	50 40       	sbci	r21, 0x00	; 0
    2020:	a9 f7       	brne	.-22     	; 0x200c <__mulsf3_pse+0x64>
    2022:	9e 3f       	cpi	r25, 0xFE	; 254
    2024:	51 05       	cpc	r21, r1
    2026:	70 f0       	brcs	.+28     	; 0x2044 <__mulsf3_pse+0x9c>
    2028:	5c cf       	rjmp	.-328    	; 0x1ee2 <__fp_inf>
    202a:	a6 cf       	rjmp	.-180    	; 0x1f78 <__fp_szero>
    202c:	5f 3f       	cpi	r21, 0xFF	; 255
    202e:	ec f3       	brlt	.-6      	; 0x202a <__mulsf3_pse+0x82>
    2030:	98 3e       	cpi	r25, 0xE8	; 232
    2032:	dc f3       	brlt	.-10     	; 0x202a <__mulsf3_pse+0x82>
    2034:	86 95       	lsr	r24
    2036:	77 95       	ror	r23
    2038:	67 95       	ror	r22
    203a:	b7 95       	ror	r27
    203c:	f7 95       	ror	r31
    203e:	e7 95       	ror	r30
    2040:	9f 5f       	subi	r25, 0xFF	; 255
    2042:	c1 f7       	brne	.-16     	; 0x2034 <__mulsf3_pse+0x8c>
    2044:	fe 2b       	or	r31, r30
    2046:	88 0f       	add	r24, r24
    2048:	91 1d       	adc	r25, r1
    204a:	96 95       	lsr	r25
    204c:	87 95       	ror	r24
    204e:	97 f9       	bld	r25, 7
    2050:	08 95       	ret

00002052 <__udivmodsi4>:
    2052:	a1 e2       	ldi	r26, 0x21	; 33
    2054:	1a 2e       	mov	r1, r26
    2056:	aa 1b       	sub	r26, r26
    2058:	bb 1b       	sub	r27, r27
    205a:	fd 01       	movw	r30, r26
    205c:	0d c0       	rjmp	.+26     	; 0x2078 <__udivmodsi4_ep>

0000205e <__udivmodsi4_loop>:
    205e:	aa 1f       	adc	r26, r26
    2060:	bb 1f       	adc	r27, r27
    2062:	ee 1f       	adc	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	a2 17       	cp	r26, r18
    2068:	b3 07       	cpc	r27, r19
    206a:	e4 07       	cpc	r30, r20
    206c:	f5 07       	cpc	r31, r21
    206e:	20 f0       	brcs	.+8      	; 0x2078 <__udivmodsi4_ep>
    2070:	a2 1b       	sub	r26, r18
    2072:	b3 0b       	sbc	r27, r19
    2074:	e4 0b       	sbc	r30, r20
    2076:	f5 0b       	sbc	r31, r21

00002078 <__udivmodsi4_ep>:
    2078:	66 1f       	adc	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	88 1f       	adc	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	1a 94       	dec	r1
    2082:	69 f7       	brne	.-38     	; 0x205e <__udivmodsi4_loop>
    2084:	60 95       	com	r22
    2086:	70 95       	com	r23
    2088:	80 95       	com	r24
    208a:	90 95       	com	r25
    208c:	9b 01       	movw	r18, r22
    208e:	ac 01       	movw	r20, r24
    2090:	bd 01       	movw	r22, r26
    2092:	cf 01       	movw	r24, r30
    2094:	08 95       	ret

00002096 <_exit>:
    2096:	f8 94       	cli

00002098 <__stop_program>:
    2098:	ff cf       	rjmp	.-2      	; 0x2098 <__stop_program>
